#line 2 "lexor.cc"

#line 4 "lexor.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1025] =
    {   0,
        0,    0,  168,  166,  164,  165,  166,  163,  161,  166,
      166,  166,  161,  166,  147,  147,  162,  161,  161,  161,
      161,    6,    6,  166,    6,    6,    6,    6,    0,    7,
        0,  163,  161,  161,  146,  146,  146,  143,    0,    0,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,    0,    0,    0,    0,  147,
        0,    0,  147,  162,  161,  161,  161,    0,    0,    0,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    0,    0,
        0,    6,    6,    6,    6,    6,    6,  161,  161,  146,

      146,    0,  145,    0,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,    0,    0,    0,    0,  148,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    0,    0,    0,    6,    6,    6,
        6,    6,    6,  146,  146,  144,    0,    9,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,   77,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  132,
      161,  122,    0,    0,    0,    0,    0,    8,    0,  149,
        0,  150,    0,    0,    0,    0,    0,    0,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    0,    0,    0,    6,    6,    6,    6,
        6,  146,  146,    0,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,   80,  161,   89,   93,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  115,  161,  161,  161,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    0,    0,    0,
        6,    6,  146,  146,  146,  135,  161,   25,  161,   38,
      161,  161,  161,  161,  161,   57,   58,   61,   64,   66,

       68,  161,  161,  161,  161,  161,   75,  161,  161,  161,
       85,  161,  161,  161,  161,  161,  161,  161,  103,  106,
      107,  161,  161,  161,  161,  161,  161,  133,  134,  161,
      161,  161,  161,  129,  161,  161,  127,  158,  156,  159,
      160,    0,    0,  151,    0,    0,  154,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    0,    0,

        0,    0,    0,    6,    6,  146,  146,  146,  161,  161,
       34,  161,  161,  161,   42,   47,   50,   45,  161,  161,
       55,  161,  161,  161,  161,  161,   70,  161,  161,   73,
       74,  161,   78,   79,  161,  161,   83,  161,  161,   91,
      161,  161,  101,  102,  161,  161,  161,  161,  113,  161,
      161,  118,  161,  161,  161,  130,  131,  161,  161,  161,
      161,  161,  157,  152,    0,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    0,
        0,    0,    0,    0,  146,  146,  146,  161,  161,  161,
      161,  161,   28,  161,  161,  161,   31,  161,  161,   39,
      161,   40,   41,  161,  161,  161,   44,   53,   54,   56,
      161,  161,   65,   67,  161,  161,   72,   76,  161,   81,
       82,   86,  161,  161,   90,  161,  161,  161,  161,  108,
      109,  110,  161,  161,  116,  117,  161,  161,  121,  161,
      161,  161,  161,  161,  161,  128,    0,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    0,    0,    0,    0,
        0,  146,  136,  139,  161,  161,  161,  161,  161,   26,
       27,  161,  161,  161,  161,   35,  161,   43,   48,   49,
       51,   52,   46,  161,  161,  161,  161,   69,   71,   84,
      161,  161,   92,  161,  161,  161,  161,  161,  104,  105,
      111,  161,  161,  133,  134,  161,  161,  123,  161,  161,

      126,    0,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    0,
        0,    0,    0,    0,  142,  146,  146,   10,   13,  161,
       18,   21,   23,   29,  161,  161,   32,   36,  161,  161,
      161,  161,  161,   87,   94,  161,  161,  161,   96,  161,
      161,  161,  114,  161,  161,  161,  125,    0,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    0,    0,
        0,    0,    0,  138,  137,  140,  141,  161,  161,   16,
      161,  161,  161,   33,   30,  161,   59,   60,   62,   63,
       88,   95,  161,   99,  161,   97,  112,  119,  120,  124,
      153,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    5,    0,    0,    3,    0,   11,
       12,   14,   15,  161,   19,   20,   22,   24,   37,   98,
      100,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    0,    1,    0,   17,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    8,    9,    1,
        1,    1,    1,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   17,   17,   17,   19,   20,   21,   22,   23,
        1,   24,    1,    1,   25,   26,   27,   28,   29,   26,
        6,    6,   30,    6,    6,    6,   31,   32,   33,   34,
        6,   35,   36,   37,   38,   39,   40,   41,    6,    6,
        1,   42,    1,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,    6,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    5,    6,    7,    7,    7,    7,    7,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    8,    3,    4,    4,    4,    4,    4,    4,    9,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[1039] =
    {   0,
        0,   40, 3020, 3021, 3021, 3021,   24,    0, 2977,   19,
        0, 2971,   42,    0,   55,   98,    0,   90,   23,   59,
       69,   96,  128,   29,  104,  101,  106,  111,   91, 3021,
     3014,    0, 2974,  192,    0, 2963, 2956, 2979, 2973, 2963,
       94,  103,  107,  153,   68,  124,   43,   84,  117,  163,
      119,  176,  181,   95,  127, 2978, 2979, 2975, 2969,  228,
        0,  117,  240,    0,  145,  187,  188,  251,  262,  273,
      261,    0,  303,  273,  275,  298,  278,  312,  315,  325,
      329,  332,  335,  339,  342,  366,  372,  380, 2954, 2941,
     2946,  374,  383,  386,  417,  428,  439, 2961,  459, 2948,

     2949, 2961, 3021, 2954,  170,  308,  179,  162,  166,  194,
      184,  186,  210,  252,  429,  195,  336,  220,   37,  281,
      233,  301,  322,  431,  360,  274,  309,  121,  264,  369,
      357,  341,  381,  388,  430,    5, 2957, 2969, 2959,    0,
      460, 2950,  470,  481, 2939,  401,  492,  503,  515, 2933,
      536,  516,  558,  547,  549,  551,  553,  560,  563,  575,
      583,  580,  591,  600,  603,  607,  612,  614,  627,  629,
      637,  640,  654,  644,  657,  660,  664,  519,  666,  669,
      686,  671,  694,  696, 2938, 2937, 2938,  707,  725, 2934,
      744,  762,  780, 2940, 2944, 3021, 2923, 2943,  462,  371,

      495,  550,  437,  295,  444,  502,  461,  458,  571,  546,
      499,  598,  602,  574,  435,  628,  663,  548,  485,  685,
      615,  631,  690,  592,  536,  692,  702,  703,  710,  742,
      727,  761, 2946, 2945, 2953, 2951, 2946,  753,  787, 3021,
      790, 3021, 2929, 2916, 2929,  674,  808, 2952,  723,  747,
      789,  792,  806,  819,  817,  822,  826,  828,  848,  850,
      852,  855,  857,  861,  864,  885,  898,  889,  892,  895,
      900,  902,  905,  915,  922,  932,  929,  937,  944,  942,
      959,  946,  976, 2927, 2931, 2930,  823,    0,  979,    0,
     1034, 2929,  739, 2921,  793,  554,  823,  835,  963,  818,

      750,  964,  991,  840,  643,  894,  962,  920,  921,  844,
      888,  975,  856,  966,  974,  221,  968,  981,  398,  970,
      893,  985,  995,  996,  988,  973, 1004,  998,  997, 1044,
     2933, 2932, 2940, 2932, 2928, 2915, 2940, 2903, 2916, 2937,
     3021, 1043, 1046, 1050, 1053, 1074, 1076, 1083, 1085, 1105,
     1109, 1112, 1114, 1121, 1125, 1134, 1136, 1138, 1150, 1171,
     1165, 1173, 1175, 1177, 1180, 1185, 1202, 1205, 1208, 1210,
     1213, 1217, 1222, 1225, 1239, 1242, 1255, 2917, 1008, 1009,
        0, 1303, 2905, 2914, 2894, 3021, 1089, 1098, 1244, 2914,
     1209, 1228, 1045, 1250,  999, 2913, 1104, 1113, 1139, 1151,

     1164, 1000, 1068, 1077, 1231, 1174, 2912, 1232, 1249, 1127,
     2911, 1271, 1201, 1266,  768, 1257, 1267, 1261, 1023, 2910,
     1269, 1313, 1160, 1188, 1196, 1286, 1295, 1111, 1291, 1318,
     1296, 1238, 1292, 2909, 1298, 1314, 1301, 3021, 3021, 3021,
     3021, 2913, 2925, 3021, 2924, 2929, 3021, 1341, 1345, 1350,
     1347, 1352, 1355, 1357, 1367, 1362, 1372, 1395, 1403, 1407,
     1409, 1412, 1405, 1415, 1417, 1419, 1429, 1440, 1442, 1445,
     1449, 1454, 1469, 1475, 1471, 1479, 1477, 1486, 1491, 1499,
     1503, 1519, 1523, 1514, 1516, 1526, 1529, 1546, 1550, 1552,
     1566, 1557, 1559, 1561, 1572, 1586, 1588, 1598, 2890, 2897,

     2896, 2886, 2890,    0,    0, 2889, 2886, 2883, 1428, 1577,
     2896, 1123, 1340, 1325, 1575, 1100, 1330, 1365, 1448, 1364,
     1379, 1302, 1402, 1418, 1463, 1502, 2895, 1544, 1474, 2894,
     2893, 1555, 2892, 2891, 1406, 1581, 2890, 1571, 1392, 1603,
     1149, 1549, 2889, 2888, 1518, 1470, 1597, 1584, 2887, 1606,
     1638, 2886, 1214, 1605, 1613, 2885, 2884, 1413, 1612, 1585,
     1614, 1621, 3021, 3021, 2915, 1642, 1652, 1646, 1659, 1663,
     1672, 1694, 1696, 1704, 1709, 1699, 1701, 1711, 1721, 1724,
     1731, 1746, 1748, 1751, 1754, 1756, 1758, 1760, 1762, 1785,
     1787, 1791, 1794, 1796, 1798, 1800, 1820, 1807, 1824, 1827,

     1830, 1837, 1847, 1850, 1852, 1854, 1857, 1883, 1860, 1867,
     1888, 1892, 1894, 1896, 1900, 1904, 1909, 1925, 1920, 2880,
     2869, 2862, 2874, 2865, 2862, 2861, 2868, 1512, 1636, 1617,
     1535, 1629, 2871, 1684, 1695, 1637, 1697, 1714, 1698, 2870,
     1752, 2861, 2851, 1893, 1899, 1786, 2850, 2841, 2825, 2822,
     1745, 1924, 2820, 2819, 1825, 1784, 2813, 2812, 1047, 2802,
     2772, 2770, 1747, 1826, 2768, 1889, 1649, 1921, 1957, 2766,
     2764, 1897, 1840, 1851, 2762, 2760, 1719, 1845, 2758, 1755,
     1913, 1884, 1926, 1858, 1934, 2757, 1738, 1950, 1958, 1966,
     1970, 1974, 1972, 1980, 1982, 1986, 1994, 1996, 2003, 2006,

     2008, 2017, 2019, 2028, 2030, 2039, 2041, 2043, 2050, 2052,
     2054, 2056, 2063, 2080, 2083, 2085, 2087, 2089, 2095, 2097,
     2100, 2109, 2111, 2121, 2124, 2131, 2133, 2137, 2153, 2146,
     2148, 2162, 2173, 2175, 2177, 2182, 2185, 2189, 2197, 2202,
     2209, 2211, 2214, 2217, 2219, 2223, 2731, 2733, 2714, 2710,
     2723, 2718, 2751, 2731, 1560, 1620, 1937, 1942, 2203, 2698,
     2696, 2002, 1941, 1797, 2098, 2694, 2015, 2692, 2682, 2667,
     2665, 2663, 2659, 2072, 2053, 2074, 2088, 2652, 2641, 2637,
     1969, 2120, 2631, 2040, 2004, 2108, 2142, 2212, 2628, 2626,
     2615, 2145, 2168, 2611, 2599, 2147, 1299, 2591, 2218, 2180,

     2589, 2267, 2247, 2252, 2254, 2267, 2274, 2278, 2280, 2282,
     2289, 2294, 2291, 2302, 2304, 2317, 2319, 2324, 2329, 2331,
     2333, 2339, 2341, 2344, 2346, 2353, 2355, 2361, 2367, 2376,
     2378, 2381, 2383, 2389, 2392, 2398, 2403, 2405, 2418, 2420,
     2425, 2427, 2433, 2435, 2441, 2447, 2457, 2461, 2468, 2582,
     2559, 2554, 2541, 2547,    0, 2019,  726, 2237, 2251, 2230,
     2288, 2295, 2338, 2544, 2330, 2213, 2543, 2375, 2279, 2368,
     2354, 2424, 2434, 2539, 2517, 1660, 2122, 2377, 2501, 2253,
     2393, 2426, 2460, 2436, 2390, 2430, 2458, 2497, 2481, 2483,
     2495, 2508, 2510, 2512, 2503, 2505, 2516, 2518, 2532, 2538,

     2540, 2545, 2542, 2549, 2552, 2554, 2565, 2569, 2576, 2585,
     2590, 2592, 2596, 2598, 2600, 2625, 2622, 2627, 2437, 2453,
     2437, 2415, 2403,    0,    0,    0,    0, 2488, 2568, 2496,
     2595, 2511, 2537, 2382, 2340, 2597, 2332, 2318, 2303, 2292,
     2281, 2246, 2504, 2224, 2541, 2176, 2172, 2169, 2132, 2099,
     3021, 2636, 2638, 2651, 2642, 2648, 2653, 2658, 2662, 2664,
     2668, 2688, 2691, 2693, 2695, 2697, 2699, 2703, 2705, 2708,
     2719, 2725, 2728, 2730, 3021, 2077, 2037, 3021, 1989, 1933,
     1887, 1871, 1823, 2575, 1814, 1792, 1783, 1708, 1478, 1438,
     1359, 2732, 2734, 2736, 2739, 2745, 2756, 2759, 2761, 2765,

     2767, 2769, 2771, 1345, 3021,  981,  934, 2773,  921,  874,
      845,  805,  652,  415,  379,  348,  321,  229,  196,  142,
       84, 3021, 3021, 3021, 2815, 2824, 2833, 2842, 2849, 2856,
     2865, 2872, 2881, 2887, 2892, 2901, 2907, 2913
    } ;

static const flex_int16_t yy_def[1039] =
    {   0,
     1025, 1026, 1024, 1024, 1024, 1024, 1027, 1028, 1029, 1030,
     1024, 1024, 1029, 1024, 1024, 1024, 1031, 1029, 1029, 1029,
     1029, 1032, 1032, 1024, 1032, 1032, 1032, 1032, 1027, 1024,
     1027, 1028, 1029, 1033, 1030, 1030, 1030, 1024, 1024, 1024,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1024, 1024, 1024, 1024, 1024,
     1034, 1024, 1024, 1031, 1029, 1029, 1029, 1024, 1024, 1024,
     1032, 1035, 1036, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024, 1024,
     1024, 1032, 1032, 1032, 1035, 1035, 1035, 1029, 1033, 1030,

     1030, 1024, 1024, 1024, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1024, 1024, 1024, 1024, 1034,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1032, 1036, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1024, 1024, 1024, 1035, 1035, 1035,
     1035, 1035, 1035, 1030, 1030, 1024, 1024, 1029, 1029, 1029,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1037, 1024, 1024, 1024, 1024, 1024, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1024, 1024, 1024, 1035, 1035, 1035, 1035,
     1035, 1030, 1030, 1024, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1024, 1024, 1024, 1024, 1024, 1037, 1038, 1024, 1024, 1024,
     1024, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024, 1024, 1024,
      291, 1035, 1030, 1030, 1030, 1024, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1024, 1024, 1024,
     1024, 1024, 1038, 1024, 1024, 1024, 1024, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024, 1024,

     1024, 1024, 1024,  382, 1035, 1030, 1030, 1030, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1024, 1024, 1024, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,

     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024,
     1024, 1024, 1024, 1024, 1030, 1030, 1030, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1024, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,

     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1024, 1024, 1024, 1024,
     1024, 1030, 1030, 1030, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1024, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024,
     1024, 1024, 1024, 1024, 1030, 1030, 1030, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1024, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,

     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1024, 1024,
     1024, 1024, 1024, 1030, 1030, 1030, 1030, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1024, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1024, 1024, 1024, 1024, 1024, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,

     1032, 1032, 1032, 1024, 1024, 1024, 1029, 1032, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024,    0, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024
    } ;

static const flex_int16_t yy_nxt[3090] =
    {   0,
        4,    5,    6,    7,    8, 1024,   10,   11,    4,    4,
       12,   13,   14,   15,   16,   16,   16,   16,   16,   16,
        4,   17,    4,    4,   38, 1024,   18,   30, 1024,   56,
       57,   58,   59,   39, 1024,   19,   20,  233,  234,   21,
        4,    5,    6,    7,    8,   68,   10,   11,    4,    4,
       12,   23,   14,   15,   16,   16,   16,   16,   16,   16,
       24,   17,    4,    4,   34,   31,   25,   36,   60,   60,
       60,   60,   60,   60,   60,   26,   27,   89,   34,   28,
       90,   69,   37,   34,   34,   41,  119,   42,   43,   44,
       45,   70,   91,   46,   30,   47,   48,   49,  214,   50,

       34,   51,   52,   53,   54,   55,   62,   65,   66,   34,
       34,   63,   63,   63,   63,   63,   63,   63,   72,   72,
       61,   92,   93,   95,   72,   34,   72,   72,   96,   72,
      116,   34,   31,   97,   72,   34,   34,   73,  105, 1023,
      120,  133,   73,  134,   34,   73,  107,   73,   34,   67,
       72,   72,   73,  106,  111,  112,  108,  109,   34,  110,
       34,  141,   34,   94,  121,   34,  124,  143,   34,   73,
      135,   74,  225,   75,   76,   77,   78,  142,  117,   79,
      125,   80,   81,   82,  118,   83,   34,   84,   85,   86,
       87,   88,   33,   33,   34,   33,   33, 1022,   33,   33,

       33,   33,   33,   34,   34,  202,  122,   34,  113,  144,
      145,   34,   33,   33,   33,   33,  114,   34,  115,  123,
       34,  126,   34,  203,  127,   34,  128,   34,   34,   34,
      198,  130,  131,   99,  206,   34,   34,  205,  129,  201,
      132,   60,   60,   60,   60,   60,   60,   60,   62,  204,
      211,   34, 1021,   63,   63,   63,   63,   63,   63,   63,
      146,   34,   34,  415,  147,  147,  147,  147,  147,  147,
      147,  148,  207,  213,   34,  149,  149,  149,  149,  149,
      149,  149,  150,   72,   72, 1020,  151,  151,  151,  151,
      151,  151,  151,   34,  216,   72,   72,   72,   72,  208,

       72,   72,   73,   33,   33,   34,   33,   33,  226,   33,
       33,   33,   33,   33,   73,   34,   73,  154,  156,   73,
       72,   72,   34,   33,   33,   71,   71,  215,  157,  158,
      223,  159,  155,  162,   72,   72,   34,   72,   72,   73,
      300,  163,   34,  164,  153,  160,  161,   72,   72,   34,
       34,   72,   72,   73,   72,   72,   73,   72,   72,  199,
      217,   72,   72,   34,   72,   72,   73,  200,  168,  166,
       73,  224, 1019,   73,  165,  167,   73,   34,  171,  170,
       73,  218,   34,   73,  229,  169,  173,  175,   72,   72,
      176,  172,  177,  212,   72,   72,  188,   72,   34, 1018,

      174,   34,   72,   72,  178,  189,   72,   73,  190,   72,
       34,  228,   34,   73,  296,   73,  179,  180,  182,  222,
      183,   73,   34,  184,   73,  181,  146,   73,  227,   34,
      191,  191,  191,  191,  191,  191,  191,  148,  230,   34,
     1017,  192,  192,  192,  192,  192,  192,  192,  150,  299,
      231,  418,  193,  193,  193,  193,  193,  193,  193,   33,
       33,  244,   33,   33,  245,   33,   33,   33,   33,   33,
       34,   34,   34,  238,  238, 1016,   34,  219,   34,   33,
       33,   33,   33,  239,  239,   34,  209,  301,  220,  232,
      210,  221,  311,  240,  241,  241,  241,  241,  241,   34,

       99,  146,   34,   34,  242,  147,  147,  147,  147,  147,
      147,  147,  246,  304,  302,  303,  247,  247,  247,  247,
      247,  247,  247,  295,  148,  238,   34,  238,  149,  149,
      149,  149,  149,  149,  149,  239,   34,  239,   72,   72,
       34,   72,   72,   34,  307,  150,  241,  317,  241,  151,
      151,  151,  151,  151,  151,  151,  297,   73,   33,   33,
       73,   33,   33,  277,   33,   33,   33,   33,   33,   72,
       72,   72,   72,   72,   72,   72,   72,   34,   33,   33,
       71,   71,   72,   72,  323,   72,   72,   34,   73,   34,
       73,   34,   73,  306,   73,   34,  253,   72,   72,  153,

      250,   73,   72,   72,   73,   72,   72,  249,  251,  316,
      298,  252,   34,   72,   72,   34,   73,  254,  255,  310,
      388,   73,   72,   72,   73,   72,   72,  305,  256,   72,
       72,  257,   73,   34,   72,   72,   72,   72,  259,   34,
      312,   73,  258,   34,   73,  309,  313,  322,   73,   72,
       72,   72,   72,   73,  308,   73,   34,  260,  262,   72,
       72,  261,   72,   72,  263,  264,   72,   72,   73,   34,
       73,  319,   34,  266,  320,  265,   72,   72,   73,   72,
       72,   73,   72,   72,   34,   73,   72,   72,   72,   72,
      267,   72,   72,   72,   72,   73,  268, 1015,   73,  269,

      270,   73,  402,  273,   34,   73,  314,   73,   72,   72,
       73,  271,   73,  274,  272,  276,   72,   72,   72,   72,
      287,  287,  275,  279,  315,  278,   34,   73,  281,  280,
      288,   34,  318,   34,  340,   73,  340,   73,  289,  289,
      289,  289,  289,   34,   34,   72,   72,  321,  290,  325,
      326,   34,  324,  146,  328,  283,  282,  191,  191,  191,
      191,  191,  191,  191,   73,  327,  238,  238,   34,   72,
       72,  148,  287,  330,  287,  192,  192,  192,  192,  192,
      192,  192,  329,   34,  384,  926,  927,  385,   73,  150,
      289,   34,  289,  193,  193,  193,  193,  193,  193,  193,

      239,  239,   34,  241,  241,  241,  241,  241,  342,   34,
      240,   72,   72,  242,   72,   72,  396,  246,  238,  541,
      238,  247,  247,  247,  247,  247,  247,  247,   72,   72,
       73,  346,  343,   73,   34,  389,  287,  287,  349,   72,
       72,   72,   72,  387,   72,   72,  288,   73,   72,   72,
       72,   72,  239,  344,  239,  241, 1014,  241,   73,   34,
       73,  395,  347,   73,   34,  348,  345,   73,  412,   73,
       72,   72,   72,   72,   72,   72,   34,   72,   72,   72,
       72,   34,  350,   72,   72,   34,   72,   72,  287,   73,
      287,   73, 1013,   73,  407,  390,   73,   34,   73,  353,

      354,  401,   73,  351,  356,   73,  352,   72,   72,  357,
      359,   72,   72,  355,   72,   72,  360,   72,   72, 1012,
       72,   72,   72,   72,   72,   72,   73,   72,   72,   34,
       73,  408,  361,   73,   34,   34,   73,   72,   72,   73,
      420,   73,  358,   73,   72,   72,   73,  365,  367,  403,
      362,   72,   72,  363,   72,   72,   73,  364,  366,   72,
       72,   34,   34,   73,   72,   72,   72,   72,   72,   72,
       73,  375,  368,   73, 1011,   34,  406,  369,   73,  405,
      370,   72,   72,   73,  372,   73,  414,   73,  377,  371,
      409,  373,  289,  289,  289,  289,  289,  374,   72,   72,

       73,  376,  290,   34,   34,   34,  399,   34,  400,   34,
      391,   34,  392,  416,   34,   34,   34,   73,  393,  397,
      413,  398,   34,  404,  417,  419,   34,  394, 1010,   34,
      421,  424,   34,  425,  410,  411,   34,   34,   34,   34,
       34,   34,  430,  428,  289,   34,  289,  381,  381,  381,
      381,  381,  381,  381,  500,  426,  422,  423,  429,  431,
      521,  527,  450,  502,   34,   72,   72,  427,   72,   72,
      503,  501,   72,   72,  545,   72,   72,  381,  381,  381,
      381,  381,  381,  382,   73,   34,   34,   73,   34,  432,
      433,   73,  518,  448,   73,  434,   72,   72,   72,   72,

      780,  509,  435,  436,  437,   72,   72,   72,   72,   34,
      510,  644,  449,  451,  528,   73,  522,   73,   34,  456,
      460,  452,  461,  453,   73,  523,   73,   72,   72,  454,
       34,   72,   72,  529,   72,   72,   72,   72,  455,   34,
      458,   34,  459,   72,   72,   34,   73,   72,   72,  457,
       73,  524,   34,   73,   34,   73,   72,   72,   72,   72,
       72,   72,   73,  525,   34,  470,   73,  553,   34,  464,
      462,  463,   72,   72,  535,   73,  526,   73,  638,   73,
       34,  469,  465,  473,  466,  475,  468,   72,   72,  467,
       34,   73,   34,   72,   72,   72,   72,   72,   72,   72,

       72,   34,   72,   72,  667,   34,   73,   72,   72,  471,
      472,  548,   73,  538,   73,   34,   73,  476,   73,  474,
      531,   73,  477,  478,   72,   72,   73,   72,   72,   34,
       72,   72,   72,   72,  549,   72,   72,   34,  479,   72,
       72,  550,   34,   73,   72,   72,   73,   72,   72,   73,
       34,   73,  481,  482,   73,   34,  514,  480,   73,  511,
      485,   72,   72,   73,   72,   72,   73,  515,  677,   34,
      492,  483,   34,   34,  484,  516,  487,   72,   72,   34,
       73,  546,  486,   73,  489,   34,  536,  491,  488,  517,
       34,   34,  530,  532,  558,  512,   73,  519,   34,  490,

      493,  494,   34,  513,  542,  520,  495,   34,   34,  533,
       34,  534,   34,  496,  497,  498,  504,  504,  504,  504,
      504,  504,  504,  539,  544,  547,  505,   34,  543,  540,
      555,  537,   34,   34,  551,  559,   34,   34,  554,   34,
       34,  645,   34,   34,  885,  651,  504,  504,  504,  504,
      504,  504,  552,  566,   34,   34,  556,  567,  557,   34,
      560,  561,  562,   72,   72,  568,   34,   72,   72,   72,
       72,   34,   72,   72,   72,   72,  646,   72,   72,   72,
       72,   34,   73,  640,   72,   72,   73,  639,   73,   72,
       72,   73, 1009,   73,   72,   72,   73,  650,   73,  571,

       34,  569,  573,   73,  575,   34,   34,  579,   73,  570,
      572,  649,  647,   73,  576,  580,  574,   72,   72,  581,
       34,  582,  577,  578,  583,   72,   72,   72,   72,   72,
       72,   72,   72,   34,   72,   72,   73,   72,   72,   72,
       72,   72,   72,   34,   73,  652,   73,   34,   73,  659,
       73,   72,   72,   73,   34,  665,   73,  682,   73,   34,
       73,  585,   72,   72,   72,   72,  584,   72,   72,   34,
       73,   72,   72,  586,  628,  588,   72,   72,  653,   34,
      587,   73,  629,   73,  593,  630,   73,  595,  631,   34,
       73,   72,   72,   72,   72,   73,  592,   72,   72,   72,

       72,   72,   72,  589,   34,  590,  648,  591,   72,   72,
       73,   34,   73,   72,   72,   34,   73,  670,   73,   34,
       73,   72,   72,  654,  599,   72,   72,   73,  596,  594,
      598,  603,   73,  657,  597,  604,   72,   72,   72,   72,
       73,   72,   72,   34,   73,   72,   72,  600,   72,   72,
      602,   72,   72,   34,  601,   73,  656,   73,  655,   34,
       73,  668,  606,  755,   73,  605,  669,   73,   72,   72,
       73,  607,   72,   72,   72,   72,   34,  608,  612,   72,
       72,   72,   72,   72,   72,   34,  641,   73,   72,   72,
       34,   73,  632,   73,   72,   72,   34,  759,   73,  611,

       73,   34,   73,  609,  616,  658,  610,   73,   72,   72,
       72,   72,   34,   73,  666,  615,   34,  613,   34,  614,
       72,   72,   34,  858,  662,   34,   34,   73,  633,   73,
      663,  664,  684,  634,  635,  618,  636,  637,   34,   73,
      642,  660,  643,  661,   34,  673,   34,   34,  617,  674,
      671,  675,  676,   34,   34,   34,  672,  685,   34,  619,
      679,   34,   34,  678,   72,   72,  859,  692,   72,   72,
       34,  683,  680,  758,   72,   72,  681,   34,   34,   34,
      686,   72,   72,   73,  764,   72,   72,   73,  688,  760,
       34,  761,  756,   73,   72,   72,  689,  784,  757,  690,

       73,   34,  691,  693,   73,  701,  942,  704,  694,  695,
      699,  696,  697,   73,  698,  705,   72,   72,   72,   72,
      706,   72,   72,   72,   72,   34,   72,   72,  762,  710,
      700,   72,   72,   72,   72,   73,   34,   73,   34,   34,
       73,  767,   73,   72,   72,   73,   72,   72,  709,   34,
       73,  763,   73,   72,   72,   34,  707,  708,  765,  702,
       34,  703,   73,  794,  711,   73,  716,  712,   72,   72,
       72,   72,   73,   72,   72,  766,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   34,   73,   34,   73,
      774,  713,   73,   34,  781,   73,   34,   73,  802,   73,

      802,   73,  796,   73,  715,  775,  714,   72,   72,   72,
       72,  768,  718,   72,   72,  717,   72,   72,   72,   72,
       72,   72,   72,   72,   34,   34,   73,   34,   73,   72,
       72,  726,   73,   34,  719,   73,  728,   73,   34,   73,
      866,   73,   72,   72,  779,  773,   72,   72,   73,   72,
       72,  722,   72,   72,  720,   34,  721,  723,  724,   72,
       72,   73,  727,  725,   34,   73,   34,   34,   73,   72,
       72,   73,   72,   72,   72,   72,   72,   72,   73,   72,
       72,   34,   72,   72,  778,  729,   34,  782,   73,   72,
       72,   73,   34,   73,  730,   73,  735,  736,   73,   34,

      734,   73,  792,  731,  793,   72,   72,  795,   73,  732,
       72,   72,   34,  733,   72,   72,   72,   72,   72,   72,
      800,  737,   72,   72,   73,   34,   72,   72,   34,   73,
       34,   72,   72,   73,   34,   73,  798,   73,   34,  739,
       34,   73,   72,   72,  742,   73,  738,   72,   72,  783,
       73,  740,  769,  770,   34,  741,  744,  791,  771,  772,
      797,   73,   34,  743,  785,   34,   73,   34,  745,  776,
      789,  790,   72,   72,   34,   34,  786,  787,   34,  746,
       72,   72,   34,   34,  777,  799,  788,  801,   72,   72,
      860,   73,   72,   72,   72,   72,   72,   72,   34,   73,

      865,  803,   72,   72,   72,   72,  861,   73,   72,   72,
       34,   73,  873,   73,  804,   73,   72,   72,   72,   72,
      805,   73,  806,   73,  810,   72,   72,   73,   72,   72,
       72,   72,  807,  812,  808,   73,  809,   73,  811,   72,
       72,   72,   72,   34,   73,   34,  815,   73, 1006,   73,
       72,   72,   72,   72,  864,  813,   34,  814,   73,  876,
       73,   72,   72,   72,   72,   72,   72,  816,  868,   73,
      924,   73,   72,   72,   72,   72,   72,   72,   72,   72,
       73,   34,   73,  925,   73,   72,   72,  817,  818,  819,
      820,   73, 1005,   73,   34,   73,  875,   73,  821,  822,

      870,  824,   72,   72,   73,   72,   72,   72,   72,   72,
       72,   72,   72,   34,  823,   34,  825,   72,   72,   72,
       72,   73,   72,   72,   73,  869,   73,  871,   73,   34,
       73,   72,   72,   72,   72,  872,   73, 1004,   73,   34,
       34,   73,  826,   72,   72,  827,   72,   72,  828,   34,
       73,  877,   73,   72,   72,   72,   72,  867,  829,   72,
       72,   34,   73,   34,  878,   73,  837,  838,   72,   72,
       72,   72,   73,   34,   73,   72,   72,  943,   73,  874,
      833,  832,  830,   34,   72,   72,   34,   73,   34,   73,
      884,  831,  834,  835,   73,   72,   72,   72,   72,   72,

       72,  879,  836,   73,   72,   72,  882,   72,   72,   34,
       34,   72,   72,   34,   73,  883,   73,   34,   73,   72,
       72,   34,  839,   73,   72,   72,   73,  887,  841,  842,
       73,   72,   72,   72,   72,  840,   72,   72,   73,   72,
       72,   72,   72,   73,   34,   72,   72,  862,  928,  844,
       73,  843,   73,   34,   34,   73,  845,  863,   73,   34,
       73,  886,  929,  846,   73,   34,  935,  880,  881,   72,
       72,   34,  849,  847,   72,   72,   72,   72,   34,  848,
      888,  888,  888,  888,  888,  888,  888,   34,   73,   72,
       72,  930,   34,   73,   34,   73,   72,   72,  890,  931,

       72,   72,   72,   72,   72,   72,  932,  891,   73,  945,
      889,   72,   72,   72,   72,   73,   72,   72,  893,   73,
       34,   73,   34,   73,   72,   72,   72,   72,  894,   34,
       73,  892,   73,   34,  895,   73,   34,  897,  937,   72,
       72,   72,   72,   73,   34,   73,   72,   72,  896,  933,
      898,   72,   72,   72,   72,   72,   72,  899,   73,   34,
       73,   72,   72,   72,   72,   73,   72,   72,   72,   72,
       73,   34,   73,   34,   73,   72,   72,   72,   72,   34,
       73,   34,   73,   72,   72,   73,  936,   73,  901,   72,
       72,  934,  900,  903,   73,   34,   73,  902,   72,   72,

       72,   72,   73,   72,   72,   72,   72,  949,   73,   34,
      904,   72,   72,  939,   72,   72,   34,   73,   34,   73,
       72,   72,   73,   34,   73,   72,   72,   72,   72,  938,
       73,   34,  908,   73,   34,  905,  944,  906,  907,   73,
       72,   72,   72,   72,   73,  909,   73,   72,   72,   72,
       72,  910,  946,  911,  912,   72,   72,   72,   72,   73,
      979,   73,  978,   72,   72,   34,   73,   34,   73,   72,
       72,   34,  914,  947,   73,   34,   73,   34,  915,   72,
       72,  913,   73,   72,   72,  940,  916,  941,   73,  948,
       72,   72,  952,  977,  953,  976,  950,  975,   73,   34,

      917,   34,   73,   72,   72,   72,   72,  984,  918,   73,
      888,  888,  888,  888,  888,  888,  888,   72,   72,  955,
      951,  956,   73,  957,   73,   72,   72,   72,   72,   34,
       72,   72,   72,   72,   72,   72,   73,   34,   72,   72,
       72,   72,   34,  960,   73,   34,   73,  980,  981,   73,
      990,   73,   34,   73,   72,   72,  954,   73,   34,   73,
       72,   72,   72,   72,   72,   72,  958,   72,   72,  959,
      987,   72,   72,   73,   72,   72,   72,   72,   34,   73,
       34,   73,   34,   73,   34,   34,   73,   72,   72,  923,
       73,   72,   72,   73,  922,   73,  988,  961,   72,   72,

      991,  962,  965,  964,  963,  921,   73,   72,   72,   34,
       73,  966,   72,   72,   72,   72,   34,   73,   72,   72,
       72,   72,   72,   72,  967,  920,   73,  982,  983,  919,
       34,   73,   34,   73, 1007,  968,   34,   73,   34,   73,
       34,   73,  973,  971,   72,   72,  969,   72,   72,   72,
       72,  970,   34,  972,  985,  986,   34,  989,   72,   72,
       72,   72,  996,   73,   72,   72,   73,   34,   73,   34,
       72,   72,   34,   72,   72,   72,   72,   73,   34,   73,
       72,   72,   34,   73,   72,   72,   72,   72,  974,   73,
       72,   72,   73,   34,   73,  992,  993,  994,  995,   73,

       34,  997,  998,   73,   34,   73,   34,  999,   34,   73,
       72,   72, 1000,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   34, 1001,   72,   72,   72,   72,   73,
       72,   72,   73,   34,   73,   34,   73,   34,   73,   34,
       73,   72,   72,  857,   73, 1002,   73,   72,   72,   73,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       73,   72,   72,  856, 1003,  855,   73,   72,   72,   73,
      854,   73,  853,   73,  852,   73,  851,   73,   72,   72,
       73,   72,   72,   72,   72,  850,   73,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   73,   34,   34,

       73,   34,   73,   34, 1008,   34,   73,   34,   73,   34,
       73,   34,   73,   34,   73,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   32,   34,   32,   32,   32,   32,   32,   32,
       32,   33,   33,   34,   34,   33,   33,   33,   35,   35,
       34,   34,   35,   34,   35,   64,   34,   64,   64,   64,
       64,   64,   64,   64,   71,   71,   71,   71,   71,   71,
       71,   98,   34,   98,   98,   98,   98,   98,   98,   98,
      140,   34,   34,  140,   72,   72,   72,   72,   72,   72,

       72,  152,   34,  152,  152,  152,  152,  152,  152,  152,
      336,   34,   34,  754,  753,  336,  443,  752,  443,  751,
      750,  749,  748,  747,  687,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  627,  626,
      625,  624,  623,  622,  621,  620,  565,  564,  444,  563,
       34,   34,   34,   34,   34,   34,  508,  507,  506,  499,
      447,  446,  445,  444,  337,  442,  441,  440,  439,  438,
      386,  383,  380,  379,  378,  341,  339,  338,  337,  335,
      334,  333,  332,  331,   34,  294,  293,  292,  291,  286,
      285,  284,  248,  243,  141,  237,  236,  235,  197,  196,

      195,  194,   34,  187,  186,  185,  139,  138,  137,  136,
      104,  103,  102,  101,  100,   34, 1024,   40,   34, 1024,
        3, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024
    } ;

static const flex_int16_t yy_chk[3090] =
    {   0,
        1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,    0,    1,    7,    0,   14,
       14,   14,   14,   11,    0,    1,    1,  136,  136,    1,
        2,    2,    2,    2,    2,   19,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   19,    7,    2,   10,   15,   15,
       15,   15,   15,   15,   15,    2,    2,   24,  119,    2,
       24,   20,   10,   13,   47,   13,   47,   13,   13,   13,
       13,   21,   24,   13,   29,   13,   13,   13,  119,   13,

       20,   13,   13,   13,   13,   13,   16,   18,   18,   45,
       21,   16,   16,   16,   16,   16,   16,   16,   22,   22,
       15,   25,   25,   26,   26,   48,   25,   25,   27,   27,
       45,   18,   29,   28,   28,   41,   54,   22,   41, 1021,
       48,   54,   26,   54,   42,   25,   42,   27,   43,   18,
       23,   23,   28,   41,   43,   43,   42,   42,   49,   42,
       51,   62,  128,   25,   49,   46,   51,   65,   55,   23,
       55,   23,  128,   23,   23,   23,   23,   62,   46,   23,
       51,   23,   23,   23,   46,   23,   65,   23,   23,   23,
       23,   23,   34,   34,   44,   34,   34, 1020,   34,   34,

       34,   34,   34,  108,   50,  108,   50,  109,   44,   66,
       67,  105,   34,   34,   34,   34,   44,   52,   44,   50,
      107,   52,   53,  109,   52,  111,   52,  112,   66,   67,
      105,   53,   53,   34,  112,  110,  116,  111,   52,  107,
       53,   60,   60,   60,   60,   60,   60,   60,   63,  110,
      116,  113, 1019,   63,   63,   63,   63,   63,   63,   63,
       68,  118,  316,  316,   68,   68,   68,   68,   68,   68,
       68,   69,  113,  118,  121,   69,   69,   69,   69,   69,
       69,   69,   70,   71,   71, 1018,   70,   70,   70,   70,
       70,   70,   70,  114,  121,   74,   74,   75,   75,  114,

       77,   77,   71,   73,   73,  129,   73,   73,  129,   73,
       73,   73,   73,   73,   74,  126,   75,   74,   75,   77,
       76,   76,  120,   73,   73,   73,   73,  120,   75,   75,
      126,   75,   74,   77,   78,   78,  204,   79,   79,   76,
      204,   77,  122,   77,   73,   76,   76,   80,   80,  106,
      127,   81,   81,   78,   82,   82,   79,   83,   83,  106,
      122,   84,   84,  123,   85,   85,   80,  106,   80,   79,
       81,  127, 1017,   82,   78,   79,   83,  117,   83,   82,
       84,  123,  132,   85,  132,   81,   84,   85,   86,   86,
       85,   83,   85,  117,   87,   87,   92,   92,  131, 1016,

       84,  125,   88,   88,   85,   93,   93,   86,   94,   94,
      130,  131,  200,   87,  200,   92,   86,   86,   87,  125,
       87,   88,  133,   88,   93,   86,   95,   94,  130,  134,
       95,   95,   95,   95,   95,   95,   95,   96,  133,  319,
     1015,   96,   96,   96,   96,   96,   96,   96,   97,  203,
      134,  319,   97,   97,   97,   97,   97,   97,   97,   99,
       99,  146,   99,   99,  146,   99,   99,   99,   99,   99,
      115,  135,  124,  141,  141, 1014,  215,  124,  203,   99,
       99,   99,   99,  143,  143,  205,  115,  205,  124,  135,
      115,  124,  215,  143,  144,  144,  144,  144,  144,  208,

       99,  147,  207,  199,  144,  147,  147,  147,  147,  147,
      147,  147,  148,  208,  206,  207,  148,  148,  148,  148,
      148,  148,  148,  199,  149,  141,  219,  141,  149,  149,
      149,  149,  149,  149,  149,  143,  201,  143,  152,  152,
      211,  178,  178,  206,  211,  151,  144,  219,  144,  151,
      151,  151,  151,  151,  151,  151,  201,  152,  153,  153,
      178,  153,  153,  178,  153,  153,  153,  153,  153,  154,
      154,  155,  155,  156,  156,  157,  157,  225,  153,  153,
      153,  153,  158,  158,  225,  159,  159,  210,  154,  218,
      155,  202,  156,  210,  157,  296,  157,  160,  160,  153,

      155,  158,  162,  162,  159,  161,  161,  154,  155,  218,
      202,  156,  209,  163,  163,  214,  160,  158,  159,  214,
      296,  162,  164,  164,  161,  165,  165,  209,  160,  166,
      166,  161,  163,  224,  167,  167,  168,  168,  163,  212,
      216,  164,  162,  213,  165,  213,  216,  224,  166,  169,
      169,  170,  170,  167,  212,  168,  221,  164,  165,  171,
      171,  164,  172,  172,  166,  167,  174,  174,  169,  216,
      170,  221,  222,  169,  222,  168,  173,  173,  171,  175,
      175,  172,  176,  176,  305,  174,  177,  177,  179,  179,
      170,  180,  180,  182,  182,  173,  171, 1013,  175,  172,

      173,  176,  305,  174,  217,  177,  217,  179,  181,  181,
      180,  173,  182,  175,  173,  177,  183,  183,  184,  184,
      188,  188,  176,  180,  217,  179,  220,  181,  182,  181,
      188,  223,  220,  226,  246,  183,  246,  184,  189,  189,
      189,  189,  189,  227,  228,  249,  249,  223,  189,  227,
      228,  229,  226,  191,  230,  184,  183,  191,  191,  191,
      191,  191,  191,  191,  249,  229,  238,  238,  231,  250,
      250,  192,  188,  232,  188,  192,  192,  192,  192,  192,
      192,  192,  231,  230,  293,  857,  857,  293,  250,  193,
      189,  301,  189,  193,  193,  193,  193,  193,  193,  193,

      239,  239,  232,  241,  241,  241,  241,  241,  250,  415,
      239,  251,  251,  241,  252,  252,  301,  247,  238,  415,
      238,  247,  247,  247,  247,  247,  247,  247,  253,  253,
      251,  254,  251,  252,  295,  297,  287,  287,  257,  255,
      255,  254,  254,  295,  256,  256,  287,  253,  257,  257,
      258,  258,  239,  252,  239,  241, 1012,  241,  255,  300,
      254,  300,  255,  256,  297,  256,  253,  257,  313,  258,
      259,  259,  260,  260,  261,  261,  298,  262,  262,  263,
      263,  304,  258,  264,  264,  310,  265,  265,  287,  259,
      287,  260, 1011,  261,  310,  298,  262,  313,  263,  261,

      262,  304,  264,  259,  264,  265,  260,  266,  266,  265,
      267,  268,  268,  263,  269,  269,  267,  270,  270, 1010,
      267,  267,  271,  271,  272,  272,  266,  273,  273,  311,
      268,  311,  268,  269,  321,  306,  270,  274,  274,  267,
      321,  271,  266,  272,  275,  275,  273,  271,  273,  306,
      268,  277,  277,  269,  276,  276,  274,  270,  272,  278,
      278,  308,  309,  275,  280,  280,  279,  279,  282,  282,
      277,  281,  274,  276, 1009, 1007,  309,  275,  278,  308,
      276,  281,  281,  280,  278,  279,  315,  282,  283,  277,
      312,  279,  289,  289,  289,  289,  289,  280,  283,  283,

      281,  282,  289,  307,  299,  302,  303,  314,  303,  317,
      299,  320,  299,  317,  326,  315,  312,  283,  299,  302,
      314,  302,  318,  307,  318,  320,  322,  299, 1006,  325,
      322,  325,  303,  326,  312,  312,  323,  324,  329,  328,
      395,  402,  329,  328,  289,  327,  289,  291,  291,  291,
      291,  291,  291,  291,  379,  327,  323,  324,  328,  330,
      395,  402,  344,  380,  419,  342,  342,  327,  343,  343,
      380,  379,  344,  344,  419,  345,  345,  291,  291,  291,
      291,  291,  291,  291,  342,  330,  393,  343,  659,  330,
      330,  344,  393,  342,  345,  330,  346,  346,  347,  347,

      659,  387,  330,  330,  330,  348,  348,  349,  349,  403,
      388,  516,  343,  345,  403,  346,  397,  347,  404,  347,
      350,  346,  350,  346,  348,  398,  349,  350,  350,  346,
      387,  351,  351,  404,  352,  352,  353,  353,  346,  388,
      349,  516,  349,  354,  354,  397,  350,  355,  355,  348,
      351,  399,  428,  352,  398,  353,  356,  356,  357,  357,
      358,  358,  354,  400,  512,  359,  355,  428,  410,  353,
      351,  352,  359,  359,  410,  356,  401,  357,  512,  358,
      399,  358,  354,  360,  355,  362,  357,  361,  361,  356,
      541,  359,  400,  360,  360,  362,  362,  363,  363,  364,

      364,  423,  365,  365,  541,  401,  361,  366,  366,  359,
      359,  423,  360,  413,  362,  406,  363,  363,  364,  361,
      406,  365,  364,  365,  367,  367,  366,  368,  368,  424,
      369,  369,  370,  370,  424,  371,  371,  425,  366,  372,
      372,  425,  413,  367,  373,  373,  368,  374,  374,  369,
      391,  370,  368,  369,  371,  553,  391,  367,  372,  389,
      372,  375,  375,  373,  376,  376,  374,  391,  553,  392,
      377,  370,  405,  408,  371,  392,  374,  377,  377,  432,
      375,  421,  373,  376,  375,  389,  412,  376,  374,  392,
      409,  394,  405,  408,  432,  389,  377,  394,  416,  375,

      377,  377,  418,  389,  416,  394,  377,  414,  417,  409,
      421,  409,  412,  377,  377,  377,  382,  382,  382,  382,
      382,  382,  382,  414,  418,  422,  382,  426,  417,  414,
      430,  412,  429,  433,  426,  433,  427,  431,  429,  435,
      797,  517,  437,  522,  797,  522,  382,  382,  382,  382,
      382,  382,  427,  448,  422,  436,  431,  449,  431,  430,
      435,  436,  437,  448,  448,  450,  514,  449,  449,  451,
      451,  517,  450,  450,  452,  452,  518,  453,  453,  454,
      454,  513,  448,  514,  456,  456,  449,  513,  451,  455,
      455,  450, 1004,  452,  457,  457,  453,  521,  454,  452,

      991,  450,  453,  456,  454,  520,  518,  458,  455,  450,
      452,  520,  518,  457,  455,  459,  453,  458,  458,  460,
      521,  461,  455,  456,  462,  459,  459,  463,  463,  460,
      460,  461,  461,  539,  462,  462,  458,  464,  464,  465,
      465,  466,  466,  523,  459,  523,  463,  535,  460,  535,
      461,  467,  467,  462,  558,  539,  464,  558,  465,  524,
      466,  464,  468,  468,  469,  469,  463,  470,  470,  509,
      467,  471,  471,  465,  509,  467,  472,  472,  524,  990,
      466,  468,  509,  469,  473,  509,  470,  474,  509,  519,
      471,  473,  473,  475,  475,  472,  471,  474,  474,  477,

      477,  476,  476,  469,  525,  470,  519,  470,  478,  478,
      473,  546,  475,  479,  479,  529,  474,  546,  477,  989,
      476,  480,  480,  525,  477,  481,  481,  478,  475,  473,
      476,  482,  479,  529,  475,  483,  484,  484,  485,  485,
      480,  482,  482,  526,  481,  483,  483,  478,  486,  486,
      480,  487,  487,  628,  479,  484,  528,  485,  526,  545,
      482,  542,  485,  628,  483,  484,  545,  486,  488,  488,
      487,  486,  489,  489,  490,  490,  631,  487,  491,  492,
      492,  493,  493,  494,  494,  528,  515,  488,  491,  491,
      542,  489,  510,  490,  495,  495,  532,  631,  492,  490,

      493,  755,  494,  488,  494,  532,  489,  491,  496,  496,
      497,  497,  538,  495,  540,  493,  515,  492,  510,  492,
      498,  498,  536,  755,  538,  548,  560,  496,  510,  497,
      538,  538,  560,  510,  510,  497,  510,  510,  547,  498,
      515,  536,  515,  536,  540,  548,  554,  550,  496,  550,
      547,  551,  551,  559,  555,  561,  547,  561,  630,  498,
      555,  756,  562,  554,  566,  566,  756,  567,  568,  568,
      632,  559,  555,  630,  567,  567,  555,  629,  636,  551,
      562,  569,  569,  566,  636,  570,  570,  568,  566,  632,
      667,  632,  629,  567,  571,  571,  566,  667,  629,  566,

      569,  876,  566,  567,  570,  572,  876,  573,  567,  567,
      570,  567,  567,  571,  569,  574,  572,  572,  573,  573,
      575,  576,  576,  577,  577,  634,  574,  574,  634,  578,
      571,  575,  575,  578,  578,  572,  635,  573,  637,  639,
      576,  639,  577,  579,  579,  574,  580,  580,  577,  988,
      575,  635,  578,  581,  581,  638,  575,  576,  637,  572,
      677,  572,  579,  677,  579,  580,  585,  580,  582,  582,
      583,  583,  581,  584,  584,  638,  585,  585,  586,  586,
      587,  587,  588,  588,  589,  589,  651,  582,  663,  583,
      651,  581,  584,  641,  663,  585,  680,  586,  687,  587,

      687,  588,  680,  589,  583,  651,  582,  590,  590,  591,
      591,  641,  589,  592,  592,  586,  593,  593,  594,  594,
      595,  595,  596,  596,  987,  656,  590,  646,  591,  598,
      598,  597,  592,  986,  592,  593,  599,  594,  764,  595,
      764,  596,  597,  597,  656,  646,  599,  599,  598,  600,
      600,  595,  601,  601,  593,  985,  593,  595,  595,  602,
      602,  597,  598,  596,  983,  599,  655,  664,  600,  603,
      603,  601,  604,  604,  605,  605,  606,  606,  602,  607,
      607,  673,  609,  609,  655,  602,  678,  664,  603,  610,
      610,  604,  674,  605,  603,  606,  608,  608,  607,  684,

      607,  609,  673,  604,  674,  608,  608,  678,  610,  604,
      611,  611,  982,  605,  612,  612,  613,  613,  614,  614,
      684,  610,  615,  615,  608,  682,  616,  616,  981,  611,
      666,  617,  617,  612,  644,  613,  682,  614,  672,  612,
      645,  615,  619,  619,  615,  616,  611,  618,  618,  666,
      617,  612,  644,  644,  681,  612,  617,  672,  645,  645,
      681,  619,  668,  616,  668,  652,  618,  683,  618,  652,
      669,  669,  688,  688,  980,  685,  668,  668,  757,  619,
      689,  689,  763,  758,  652,  683,  668,  685,  690,  690,
      757,  688,  691,  691,  693,  693,  692,  692,  669,  689,

      763,  688,  694,  694,  695,  695,  758,  690,  696,  696,
      781,  691,  781,  693,  689,  692,  697,  697,  698,  698,
      689,  694,  690,  695,  694,  699,  699,  696,  700,  700,
      701,  701,  691,  696,  692,  697,  692,  698,  695,  702,
      702,  703,  703,  762,  699,  785,  699,  700,  979,  701,
      704,  704,  705,  705,  762,  697,  767,  698,  702,  785,
      703,  706,  706,  707,  707,  708,  708,  701,  767,  704,
      856,  705,  709,  709,  710,  710,  711,  711,  712,  712,
      706,  784,  707,  856,  708,  713,  713,  704,  704,  705,
      705,  709,  977,  710,  775,  711,  784,  712,  706,  711,

      775,  712,  714,  714,  713,  715,  715,  716,  716,  717,
      717,  718,  718,  774,  711,  776,  712,  719,  719,  720,
      720,  714,  721,  721,  715,  774,  716,  776,  717,  777,
      718,  722,  722,  723,  723,  777,  719,  976,  720,  765,
      950,  721,  715,  724,  724,  716,  725,  725,  719,  786,
      722,  786,  723,  726,  726,  727,  727,  765,  723,  728,
      728,  782,  724,  877,  786,  725,  729,  729,  730,  730,
      731,  731,  726,  949,  727,  729,  729,  877,  728,  782,
      728,  727,  724,  787,  732,  732,  792,  730,  796,  731,
      796,  726,  728,  728,  729,  733,  733,  734,  734,  735,

      735,  787,  728,  732,  736,  736,  792,  737,  737,  793,
      948,  738,  738,  947,  733,  793,  734,  946,  735,  739,
      739,  800,  732,  736,  740,  740,  737,  800,  734,  737,
      738,  741,  741,  742,  742,  733,  743,  743,  739,  744,
      744,  745,  745,  740,  759,  746,  746,  759,  858,  740,
      741,  738,  742,  788,  866,  743,  741,  759,  744,  799,
      745,  799,  859,  742,  746,  944,  866,  788,  788,  803,
      803,  860,  745,  743,  804,  804,  805,  805,  858,  744,
      802,  802,  802,  802,  802,  802,  802,  942,  803,  806,
      806,  860,  859,  804,  880,  805,  807,  807,  804,  861,

      808,  808,  809,  809,  810,  810,  862,  805,  806,  880,
      803,  811,  811,  813,  813,  807,  812,  812,  807,  808,
      869,  809,  941,  810,  814,  814,  815,  815,  807,  861,
      811,  806,  813,  940,  810,  812,  862,  812,  869,  816,
      816,  817,  817,  814,  939,  815,  818,  818,  811,  863,
      813,  819,  819,  820,  820,  821,  821,  815,  816,  938,
      817,  822,  822,  823,  823,  818,  824,  824,  825,  825,
      819,  865,  820,  937,  821,  826,  826,  827,  827,  863,
      822,  935,  823,  828,  828,  824,  868,  825,  823,  829,
      829,  865,  822,  825,  826,  871,  827,  824,  830,  830,

      831,  831,  828,  832,  832,  833,  833,  885,  829,  870,
      829,  834,  834,  871,  835,  835,  868,  830,  878,  831,
      836,  836,  832,  934,  833,  837,  837,  838,  838,  870,
      834,  885,  834,  835,  881,  830,  878,  832,  833,  836,
      839,  839,  840,  840,  837,  834,  838,  841,  841,  842,
      842,  835,  881,  836,  836,  843,  843,  844,  844,  839,
      923,  840,  922,  845,  845,  872,  841,  882,  842,  846,
      846,  886,  841,  882,  843,  873,  844,  884,  844,  847,
      847,  840,  845,  848,  848,  872,  845,  873,  846,  884,
      849,  849,  889,  921,  890,  920,  886,  919,  847,  887,

      847,  883,  848,  889,  889,  890,  890,  930,  848,  849,
      888,  888,  888,  888,  888,  888,  888,  891,  891,  892,
      888,  893,  889,  894,  890,  895,  895,  896,  896,  928,
      892,  892,  893,  893,  894,  894,  891,  930,  897,  897,
      898,  898,  879,  899,  895,  943,  896,  928,  928,  892,
      943,  893,  932,  894,  899,  899,  891,  897,  875,  898,
      900,  900,  901,  901,  903,  903,  896,  902,  902,  897,
      932,  904,  904,  899,  905,  905,  906,  906,  933,  900,
      874,  901,  945,  903,  867,  864,  902,  907,  907,  854,
      904,  908,  908,  905,  853,  906,  933,  900,  909,  909,

      945,  901,  904,  903,  902,  852,  907,  910,  910,  929,
      908,  907,  911,  911,  912,  912,  984,  909,  913,  913,
      914,  914,  915,  915,  908,  851,  910,  929,  929,  850,
      801,  911,  798,  912,  984,  909,  931,  913,  936,  914,
      795,  915,  916,  913,  917,  917,  911,  916,  916,  918,
      918,  912,  794,  915,  931,  931,  791,  936,  952,  952,
      953,  953,  954,  917,  955,  955,  916,  790,  918,  789,
      956,  956,  783,  954,  954,  957,  957,  952,  780,  953,
      958,  958,  779,  955,  959,  959,  960,  960,  917,  956,
      961,  961,  954,  778,  957,  952,  952,  953,  953,  958,

      773,  955,  955,  959,  772,  960,  771,  956,  770,  961,
      962,  962,  957,  963,  963,  964,  964,  965,  965,  966,
      966,  967,  967,  769,  960,  968,  968,  969,  969,  962,
      970,  970,  963,  768,  964,  766,  965,  761,  966,  760,
      967,  971,  971,  754,  968,  967,  969,  972,  972,  970,
      973,  973,  974,  974,  992,  992,  993,  993,  994,  994,
      971,  995,  995,  753,  969,  752,  972,  996,  996,  973,
      751,  974,  750,  992,  749,  993,  748,  994,  997,  997,
      995,  998,  998,  999,  999,  747,  996, 1000, 1000, 1001,
     1001, 1002, 1002, 1003, 1003, 1008, 1008,  997,  686,  679,

      998,  676,  999,  675,  996,  671, 1000,  670, 1001,  665,
     1002,  662, 1003,  661, 1008, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1028,  660, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1029, 1029,  658,  657, 1029, 1029, 1029, 1030, 1030,
      654,  653, 1030,  650, 1030, 1031,  649, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1033,  648, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1034,  647,  643, 1034, 1035, 1035, 1035, 1035, 1035, 1035,

     1035, 1036,  642, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1037,  640,  633,  627,  626, 1037, 1038,  625, 1038,  624,
      623,  622,  621,  620,  565,  557,  556,  552,  549,  544,
      543,  537,  534,  533,  531,  530,  527,  511,  508,  507,
      506,  503,  502,  501,  500,  499,  446,  445,  443,  442,
      434,  420,  411,  407,  396,  390,  385,  384,  383,  378,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      294,  292,  286,  285,  284,  248,  245,  244,  243,  237,
      236,  235,  234,  233,  198,  197,  195,  194,  190,  187,
      186,  185,  150,  145,  142,  139,  138,  137,  104,  102,

      101,  100,   98,   91,   90,   89,   59,   58,   57,   56,
       40,   39,   38,   37,   36,   33,   31,   12,    9,    3,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./lexor.lex"
#line 6 "./lexor.lex"
/*
 * Copyright (c) 2001-2018 Stephen Williams (steve@icarus.com)
 *
 *    This source code is free software; you can redistribute it
 *    and/or modify it in source code form under the terms of the GNU
 *    General Public License as published by the Free Software
 *    Foundation; either version 2 of the License, or (at your option)
 *    any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

# include  "parse_misc.h"
# include  "compile.h"
# include  "parse.h"
# include  <cstring>
# include  <cassert>
# include  "ivl_alloc.h"

# define YY_NO_INPUT

static char* strdupnew(char const *str)
{
      return str ? strcpy(new char [strlen(str)+1], str) : 0;
}

 inline uint64_t strtouint64(const char*str, char**endptr, int base)
{
      if (sizeof(unsigned long) >= sizeof(uint64_t))
	    return strtoul(str, endptr, base);
      else
	    return strtoull(str, endptr, base);
}

#line 1504 "lexor.cc"
#line 1505 "lexor.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 49 "./lexor.lex"


#line 52 "./lexor.lex"
  /* These are some special header/footer keywords. */
#line 1728 "lexor.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1025 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1024 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "./lexor.lex"
{ return K_ivl_version; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "./lexor.lex"
{ return K_ivl_delay_selection; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "./lexor.lex"
{ return K_vpi_module; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "./lexor.lex"
{ return K_vpi_time_precision; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "./lexor.lex"
{ return K_file_names; }
	YY_BREAK
/* A label is any non-blank text that appears left justified. */
case 6:
YY_RULE_SETUP
#line 61 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_LABEL; }
	YY_BREAK
/* String tokens are parsed here. Return as the token value the
     contents of the string without the enclosing quotes. */
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 68 "./lexor.lex"
{
      yytext[strlen(yytext)-1] = 0;
      yylval.text = strdupnew(yytext+1);
      assert(yylval.text);
      return T_STRING; }
	YY_BREAK
/* Binary vector tokens are parsed here. The result of this is a
     string of binary 4-values in the yylval.vect.text string. This is
     preceded by an 's' if the vector is signed. */
case 8:
YY_RULE_SETUP
#line 77 "./lexor.lex"
{
      yylval.vect.idx = strtoul(yytext, 0, 10);
      yylval.vect.text = (char*)malloc(yylval.vect.idx + 2);
      char*dest = yylval.vect.text;

      const char*bits = strchr(yytext, '\'');
      assert(bits);
      bits += 1;

      if (*bits == 's') {
	    *dest++ = 's';
	    bits += 1;
      }

      assert(*bits == 'b');
      bits += 1;
      unsigned pad = 0;
      if (strlen(bits) < yylval.vect.idx)
	    pad = yylval.vect.idx - strlen(bits);

      memset(dest, '0', pad);
      for (unsigned idx = pad ;  idx < yylval.vect.idx ;  idx += 1)
	    dest[idx] = bits[idx-pad];

      dest[yylval.vect.idx] = 0;
      return T_VECTOR; }
	YY_BREAK
/* These are some keywords that are recognized. */
case 9:
YY_RULE_SETUP
#line 106 "./lexor.lex"
{ return K_ARITH_ABS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "./lexor.lex"
{ return K_ARITH_DIV; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "./lexor.lex"
{ return K_ARITH_DIV_R; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "./lexor.lex"
{ return K_ARITH_DIV_S; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "./lexor.lex"
{ return K_ARITH_MOD; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "./lexor.lex"
{ return K_ARITH_MOD_R; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "./lexor.lex"
{ return K_ARITH_MOD_S; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "./lexor.lex"
{ return K_ARITH_MULT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "./lexor.lex"
{ return K_ARITH_MULT_R; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "./lexor.lex"
{ return K_ARITH_POW; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "./lexor.lex"
{ return K_ARITH_POW_R; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "./lexor.lex"
{ return K_ARITH_POW_S; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "./lexor.lex"
{ return K_ARITH_SUB; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "./lexor.lex"
{ return K_ARITH_SUB_R; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "./lexor.lex"
{ return K_ARITH_SUM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 121 "./lexor.lex"
{ return K_ARITH_SUM_R; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 122 "./lexor.lex"
{ return K_ARRAY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 123 "./lexor.lex"
{ return K_ARRAY_2S; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 124 "./lexor.lex"
{ return K_ARRAY_2U; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 125 "./lexor.lex"
{ return K_ARRAY_I; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 126 "./lexor.lex"
{ return K_ARRAY_OBJ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 127 "./lexor.lex"
{ return K_ARRAY_R; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 128 "./lexor.lex"
{ return K_ARRAY_S; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 129 "./lexor.lex"
{ return K_ARRAY_STR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 130 "./lexor.lex"
{ return K_ARRAY_PORT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 131 "./lexor.lex"
{ return K_CAST_2; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 132 "./lexor.lex"
{ return K_CAST_INT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 133 "./lexor.lex"
{ return K_CAST_REAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 134 "./lexor.lex"
{ return K_CAST_REAL_S; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 135 "./lexor.lex"
{ return K_CLASS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "./lexor.lex"
{ return K_CMP_EEQ; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 137 "./lexor.lex"
{ return K_CMP_EQX; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 138 "./lexor.lex"
{ return K_CMP_EQZ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 139 "./lexor.lex"
{ return K_CMP_EQ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 140 "./lexor.lex"
{ return K_CMP_EQ_R; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "./lexor.lex"
{ return K_CMP_NEE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "./lexor.lex"
{ return K_CMP_NE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "./lexor.lex"
{ return K_CMP_NE_R; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 144 "./lexor.lex"
{ return K_CMP_GE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 145 "./lexor.lex"
{ return K_CMP_GE_R; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 146 "./lexor.lex"
{ return K_CMP_GE_S; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 147 "./lexor.lex"
{ return K_CMP_GT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 148 "./lexor.lex"
{ return K_CMP_GT_R; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 149 "./lexor.lex"
{ return K_CMP_GT_S; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 150 "./lexor.lex"
{ return K_CMP_WEQ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 151 "./lexor.lex"
{ return K_CMP_WNE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 152 "./lexor.lex"
{ return K_CONCAT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 153 "./lexor.lex"
{ return K_CONCAT8; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 154 "./lexor.lex"
{ return K_DELAY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 155 "./lexor.lex"
{ return K_DFF_N; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 156 "./lexor.lex"
{ return K_DFF_N_ACLR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 157 "./lexor.lex"
{ return K_DFF_N_ASET; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 158 "./lexor.lex"
{ return K_DFF_P; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 159 "./lexor.lex"
{ return K_DFF_P_ACLR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 160 "./lexor.lex"
{ return K_DFF_P_ASET; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 161 "./lexor.lex"
{ return K_ENUM2; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 162 "./lexor.lex"
{ return K_ENUM2_S; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 163 "./lexor.lex"
{ return K_ENUM4; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 164 "./lexor.lex"
{ return K_ENUM4_S; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 165 "./lexor.lex"
{ return K_EVENT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 166 "./lexor.lex"
{ return K_EVENT_OR; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 167 "./lexor.lex"
{ return K_EXPORT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 168 "./lexor.lex"
{ return K_EXTEND_S; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 169 "./lexor.lex"
{ return K_FUNCTOR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 170 "./lexor.lex"
{ return K_IMPORT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 171 "./lexor.lex"
{ return K_ISLAND; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 172 "./lexor.lex"
{ return K_LATCH; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 173 "./lexor.lex"
{ return K_MODPATH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 174 "./lexor.lex"
{ return K_NET; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 175 "./lexor.lex"
{ return K_NET_2S; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 176 "./lexor.lex"
{ return K_NET_2U; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 177 "./lexor.lex"
{ return K_NET8; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 178 "./lexor.lex"
{ return K_NET8_2S; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 179 "./lexor.lex"
{ return K_NET8_2U; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 180 "./lexor.lex"
{ return K_NET8_S; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 181 "./lexor.lex"
{ return K_NET_R; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 182 "./lexor.lex"
{ return K_NET_S; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 183 "./lexor.lex"
{ return K_PARAM_L; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 184 "./lexor.lex"
{ return K_PARAM_STR; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 185 "./lexor.lex"
{ return K_PARAM_REAL; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 186 "./lexor.lex"
{ return K_PART; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 187 "./lexor.lex"
{ return K_PART_PV; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 188 "./lexor.lex"
{ return K_PART_V; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 189 "./lexor.lex"
{ return K_PART_V_S; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 190 "./lexor.lex"
{ return K_PORT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 191 "./lexor.lex"
{ return K_PORT_INFO; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 192 "./lexor.lex"
{ return K_REDUCE_AND; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 193 "./lexor.lex"
{ return K_REDUCE_OR; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 194 "./lexor.lex"
{ return K_REDUCE_XOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 195 "./lexor.lex"
{ return K_REDUCE_NAND; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 196 "./lexor.lex"
{ return K_REDUCE_NOR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 197 "./lexor.lex"
{ return K_REDUCE_XNOR; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 198 "./lexor.lex"
{ return K_REPEAT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 199 "./lexor.lex"
{ return K_RESOLV; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 200 "./lexor.lex"
{ return K_RTRAN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 201 "./lexor.lex"
{ return K_RTRANIF0; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 202 "./lexor.lex"
{ return K_RTRANIF1; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 203 "./lexor.lex"
{ return K_SCOPE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 204 "./lexor.lex"
{ return K_SFUNC; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 205 "./lexor.lex"
{ return K_SFUNC_E; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 206 "./lexor.lex"
{ return K_SHIFTL; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 207 "./lexor.lex"
{ return K_SHIFTR; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 208 "./lexor.lex"
{ return K_SHIFTRS; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 209 "./lexor.lex"
{ return K_SUBSTITUTE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 210 "./lexor.lex"
{ return K_THREAD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 211 "./lexor.lex"
{ return K_TIMESCALE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 212 "./lexor.lex"
{ return K_TRAN; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 213 "./lexor.lex"
{ return K_TRANIF0; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 214 "./lexor.lex"
{ return K_TRANIF1; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 215 "./lexor.lex"
{ return K_TRANVP; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 216 "./lexor.lex"
{ return K_UFUNC_REAL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 217 "./lexor.lex"
{ return K_UFUNC_VEC4; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 218 "./lexor.lex"
{ return K_UFUNC_E; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 219 "./lexor.lex"
{ return K_VAR; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 220 "./lexor.lex"
{ return K_VAR_COBJECT; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 221 "./lexor.lex"
{ return K_VAR_DARRAY; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 222 "./lexor.lex"
{ return K_VAR_QUEUE; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 223 "./lexor.lex"
{ return K_VAR_R; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 224 "./lexor.lex"
{ return K_VAR_S; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 225 "./lexor.lex"
{ return K_VAR_STR; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 226 "./lexor.lex"
{ return K_VAR_I; /* integer */ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 227 "./lexor.lex"
{ return K_VAR_2S; /* byte/shortint/int/longint signed */ }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 228 "./lexor.lex"
{ return K_VAR_2U; /* byte/shortint/int/longint unsigned */ }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 229 "./lexor.lex"
{ return K_UDP; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 230 "./lexor.lex"
{ return K_UDP_C; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 231 "./lexor.lex"
{ return K_UDP_S; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 232 "./lexor.lex"
{ return K_DEBUG; }
	YY_BREAK
/* instructions start with a % character. The compiler decides what
     kind of instruction this really is. The few exceptions (that have
     exceptional parameter requirements) are listed first. */
case 136:
YY_RULE_SETUP
#line 238 "./lexor.lex"
{ return K_vpi_call; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 239 "./lexor.lex"
{ return K_vpi_call_w; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 240 "./lexor.lex"
{ return K_vpi_call_i; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 241 "./lexor.lex"
{ return K_vpi_func; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 242 "./lexor.lex"
{ return K_vpi_func_r; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 243 "./lexor.lex"
{ return K_vpi_func_s; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 244 "./lexor.lex"
{ return K_file_line; }
	YY_BREAK
/* Handle the specialized variable access functions. */
case 143:
YY_RULE_SETUP
#line 248 "./lexor.lex"
{ return K_A; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 249 "./lexor.lex"
{ return K_APV; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 250 "./lexor.lex"
{ return K_PV; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 252 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_INSTR; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 257 "./lexor.lex"
{
      yylval.numb = strtouint64(yytext, 0, 0);
      return T_NUMBER; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 261 "./lexor.lex"
{
      yylval.numb = strtouint64(yytext, 0, 0);
      return T_NUMBER; }
	YY_BREAK
/* Handle some specialized constant/literals as symbols. */
case 149:
YY_RULE_SETUP
#line 267 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 272 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 277 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 282 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 287 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 292 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 297 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 302 "./lexor.lex"
{ return K_PORT_INPUT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 303 "./lexor.lex"
{ return K_PORT_OUTPUT; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 304 "./lexor.lex"
{ return K_PORT_INOUT; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 305 "./lexor.lex"
{ return K_PORT_MIXED; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 306 "./lexor.lex"
{ return K_PORT_NODIR; }
	YY_BREAK
/* Symbols are pretty much what is left. They are used to refer to
     labels so the rule must match a string that a label would match. */
case 161:
YY_RULE_SETUP
#line 310 "./lexor.lex"
{
      yylval.text = strdup(yytext);
      assert(yylval.text);
      return T_SYMBOL; }
	YY_BREAK
/* Accept the common assembler style comments, treat them as white
     space. Of course, also skip white space. The semi-colon is
     special, though, in that it is also a statement terminator. */
case 162:
YY_RULE_SETUP
#line 319 "./lexor.lex"
{ return ';'; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 320 "./lexor.lex"
{ ; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 322 "./lexor.lex"
{ ; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 324 "./lexor.lex"
{ yyline += 1; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 326 "./lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 328 "./lexor.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2699 "lexor.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1025 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1025 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1024);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 328 "./lexor.lex"


int yywrap()
{
      return -1;
}

/*
 * Modern version of flex (>=2.5.9) can clean up the scanner data.
 */
void destroy_lexor()
{
# ifdef FLEX_SCANNER
#   if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5
#     if YY_FLEX_MINOR_VERSION > 5 || defined(YY_FLEX_SUBMINOR_VERSION) && YY_FLEX_SUBMINOR_VERSION >= 9
    yylex_destroy();
#     endif
#   endif
# endif
}

