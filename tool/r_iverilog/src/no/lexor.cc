
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer VL_create_buffer
#define yy_delete_buffer VL_delete_buffer
#define yy_scan_buffer VL_scan_buffer
#define yy_scan_string VL_scan_string
#define yy_scan_bytes VL_scan_bytes
#define yy_init_buffer VL_init_buffer
#define yy_flush_buffer VL_flush_buffer
#define yy_load_buffer_state VL_load_buffer_state
#define yy_switch_to_buffer VL_switch_to_buffer
#define yypush_buffer_state VLpush_buffer_state
#define yypop_buffer_state VLpop_buffer_state
#define yyensure_buffer_stack VLensure_buffer_stack
#define yy_flex_debug VL_flex_debug
#define yyin VLin
#define yyleng VLleng
#define yylex VLlex
#define yylineno VLlineno
#define yyout VLout
#define yyrestart VLrestart
#define yytext VLtext
#define yywrap VLwrap
#define yyalloc VLalloc
#define yyrealloc VLrealloc
#define yyfree VLfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define VL_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer VL_create_buffer
#endif

#ifdef yy_delete_buffer
#define VL_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer VL_delete_buffer
#endif

#ifdef yy_scan_buffer
#define VL_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer VL_scan_buffer
#endif

#ifdef yy_scan_string
#define VL_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string VL_scan_string
#endif

#ifdef yy_scan_bytes
#define VL_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes VL_scan_bytes
#endif

#ifdef yy_init_buffer
#define VL_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer VL_init_buffer
#endif

#ifdef yy_flush_buffer
#define VL_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer VL_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define VL_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state VL_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define VL_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer VL_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define VLpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state VLpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define VLpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state VLpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define VLensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack VLensure_buffer_stack
#endif

#ifdef yylex
#define VLlex_ALREADY_DEFINED
#else
#define yylex VLlex
#endif

#ifdef yyrestart
#define VLrestart_ALREADY_DEFINED
#else
#define yyrestart VLrestart
#endif

#ifdef yylex_init
#define VLlex_init_ALREADY_DEFINED
#else
#define yylex_init VLlex_init
#endif

#ifdef yylex_init_extra
#define VLlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra VLlex_init_extra
#endif

#ifdef yylex_destroy
#define VLlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy VLlex_destroy
#endif

#ifdef yyget_debug
#define VLget_debug_ALREADY_DEFINED
#else
#define yyget_debug VLget_debug
#endif

#ifdef yyset_debug
#define VLset_debug_ALREADY_DEFINED
#else
#define yyset_debug VLset_debug
#endif

#ifdef yyget_extra
#define VLget_extra_ALREADY_DEFINED
#else
#define yyget_extra VLget_extra
#endif

#ifdef yyset_extra
#define VLset_extra_ALREADY_DEFINED
#else
#define yyset_extra VLset_extra
#endif

#ifdef yyget_in
#define VLget_in_ALREADY_DEFINED
#else
#define yyget_in VLget_in
#endif

#ifdef yyset_in
#define VLset_in_ALREADY_DEFINED
#else
#define yyset_in VLset_in
#endif

#ifdef yyget_out
#define VLget_out_ALREADY_DEFINED
#else
#define yyget_out VLget_out
#endif

#ifdef yyset_out
#define VLset_out_ALREADY_DEFINED
#else
#define yyset_out VLset_out
#endif

#ifdef yyget_leng
#define VLget_leng_ALREADY_DEFINED
#else
#define yyget_leng VLget_leng
#endif

#ifdef yyget_text
#define VLget_text_ALREADY_DEFINED
#else
#define yyget_text VLget_text
#endif

#ifdef yyget_lineno
#define VLget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno VLget_lineno
#endif

#ifdef yyset_lineno
#define VLset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno VLset_lineno
#endif

#ifdef yywrap
#define VLwrap_ALREADY_DEFINED
#else
#define yywrap VLwrap
#endif

#ifdef yyalloc
#define VLalloc_ALREADY_DEFINED
#else
#define yyalloc VLalloc
#endif

#ifdef yyrealloc
#define VLrealloc_ALREADY_DEFINED
#else
#define yyrealloc VLrealloc
#endif

#ifdef yyfree
#define VLfree_ALREADY_DEFINED
#else
#define yyfree VLfree
#endif

#ifdef yytext
#define VLtext_ALREADY_DEFINED
#else
#define yytext VLtext
#endif

#ifdef yyleng
#define VLleng_ALREADY_DEFINED
#else
#define yyleng VLleng
#endif

#ifdef yyin
#define VLin_ALREADY_DEFINED
#else
#define yyin VLin
#endif

#ifdef yyout
#define VLout_ALREADY_DEFINED
#else
#define yyout VLout
#endif

#ifdef yy_flex_debug
#define VL_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug VL_flex_debug
#endif

#ifdef yylineno
#define VLlineno_ALREADY_DEFINED
#else
#define yylineno VLlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[491] =
    {   0,
      126,  126,  132,  132,  154,  154,  151,  151,  168,  165,
      166,  167,    3,  165,  166,  167,    4,  166,  167,   66,
      165,  166,  167,   67,  165,  166,  167,   66,  165,  166,
      167,  165,  166,  167,   66,  165,  166,  167,   66,  165,
      166,  167,  165,  166,  167,   66,  165,  166,  167,   66,
      165,  166,  167,   66,  165,  166,  167,   66,  165,  166,
      167,   66,  165,  166,  167,   66,  165,  166,  167,  118,
      165,  166,  167,   66,  165,  166,  167,   66,  165,  166,
      167,   66,  165,  166,  167,   66,  165,  166,  167,  109,
      165,  166,  167,  165,  166,  167,   66,  165,  166,  167,

      165,  166,  167,   66,  165,  166,  167,   66,  165,  166,
      167,    3,  165,  166,  167,    3,  165,  166,  167,   66,
      165,  166,  167,  165,  166,  167,   12,  166,  167,   14,
      166,  167,   12,  166,  167,   12,  166,  167,  166,  167,
        9,  166,  167,   10,  166,  167,   73,  166,  167,   71,
      166,  167,   72,   73,  166,  167,   73,  166,  167,   66,
      165,  166,  167,   66,   98,  165,  166,  167,   66,   98,
      165,  166,  167,   98,  118,  165,  166,  167,   66,   98,
      165,  166,  167,   66,   98,  165,  166,  167,   90,  109,
      165,  166,  167,   93,  109,  165,  166,  167,   92,  109,

      165,  166,  167,   91,  109,  165,  166,  167,   96,  109,
      165,  166,  167,   97,  109,  165,  166,  167,   94,  109,
      165,  166,  167,   95,  109,  165,  166,  167,  126,  166,
      167,  127,  166,  167,  132,  166,  167,  133,  166,  167,
      154,  166,  167,  155,  166,  167,  151,  166,  167,  151,
      166,  167,  118,  165,  166,  167,  118,  165,  166,  167,
       65,   66,  165,  166,  167,  109,  165,  166,  167,  109,
      165,  166,  167,  122,  166,  167,   30,  111,   52,   36,
       53,  117,   62,   16,   17,   23,   50,   28,   60,   45,
       48,   61,   46,   49,   43,   18,   11,    8,   51,  118,

      121,  121,  119,   63,   47,   19,   24,   29,   26,   25,
       21,  109,  110,   55,   41,  164,   54,   35,   42,   40,
       39,   15,   13,   70,   69,   68,  126,  132,  154,  151,
      151,  150,  151,   99,  118,  100,  101,  102,  118,  103,
      104,  105,  109,  106,  109,  107,  109,  108,  109,   32,
       34,   38,  114,  112,  113,  116,  115,   64,   27,   44,
      123,  124,   37,   20,   56,   31,   33,   57,   22,  150,
      151,  150,  151,  150,  151,  114,  112,  113,  116,  115,
      123,  120,  120,  124,   58,   59,   78,   83,   79,   84,
       86,   85,   74,   75,   77,   76,   87,   88,   89,   81,

       82,   80,  123,  157,  123,  157,  157,  158,  159,  160,
      163,    1,    1,  156,  158,  158,  159,  159,  160,  160,
      161,    2,    2,  135,  163,  163,  148,  146,  156,  156,
      161,  161,  162,  135,  135,  148,  148,  162,  162,  130,
      130,  125,  144,  128,  128,  152,  152,  152,  129,  149,
      129,  153,  149,  139,  140,  141,  147,  153,  139,  139,
      140,  140,  141,  141,  147,  147,  143,  145,  131,  136,
      142,  143,  143,  145,  145,  136,  136,  142,  142,  134,
      134,  138,  137,  138,  138,    6,  137,  137,    7,    5
    } ;

static const flex_int16_t yy_accept[699] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    8,
        9,    9,    9,    9,    9,   10,   13,   17,   20,   24,
       28,   32,   35,   39,   43,   46,   50,   54,   58,   62,
       66,   70,   74,   78,   82,   86,   90,   94,   97,  101,
      104,  108,  112,  116,  120,  124,  127,  130,  133,  136,
      139,  141,  144,  147,  150,  153,  157,  160,  164,  169,
      174,  179,  184,  189,  194,  199,  204,  209,  214,  219,
      224,  229,  232,  235,  238,  241,  244,  247,  250,  253,
      257,  261,  266,  270,  274,  277,  278,  279,  280,  281,

      282,  283,  283,  283,  283,  283,  283,  284,  284,  285,
      286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  299,  300,  300,  301,  301,  302,  303,
      304,  305,  306,  306,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  317,  317,  317,  318,  319,
      320,  321,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  323,
      324,  325,  326,  327,  327,  327,  327,  327,  327,  328,
      329,  330,  331,  332,  334,  336,  337,  338,  340,  341,
      342,  344,  346,  348,  350,  351,  352,  353,  353,  354,

      354,  355,  356,  356,  357,  357,  358,  358,  358,  359,
      360,  361,  361,  361,  361,  362,  362,  363,  364,  365,
      366,  367,  368,  369,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  372,  374,  376,  377,
      378,  379,  380,  381,  381,  381,  382,  382,  383,  384,
      385,  386,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  388,  389,  390,  391,  392,  393,  394,  395,
      396,  397,  398,  399,  400,  401,  402,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  408,  409,
      409,  409,  409,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  412,  412,  412,  412,  412,

      412,  412,  412,  413,  414,  414,  414,  414,  415,  415,
      415,  416,  417,  417,  417,  417,  418,  419,  420,  421,
      422,  422,  423,  424,  424,  424,  425,  425,  425,  425,
      425,  426,  427,  428,  428,  428,  428,  428,  429,  429,
      429,  429,  429,  430,  431,  431,  431,  431,  431,  431,
      432,  433,  434,  434,  434,  435,  436,  436,  436,  436,
      436,  437,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  439,  440,  440,  440,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      442,  442,  443,  443,  443,  443,  443,  444,  444,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  448,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  452,  452,  452,  452,
      452,  452,  452,  453,  454,  454,  454,  454,  455,  456,

      457,  457,  457,  457,  457,  458,  458,  458,  458,  459,
      459,  459,  459,  460,  461,  462,  463,  464,  465,  465,
      465,  465,  465,  466,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  469,  469,  470,  470,  470,  471,  471,
      471,  472,  473,  474,  475,  476,  476,  476,  476,  477,
      478,  478,  478,  479,  480,  481,  481,  481,  481,  481,
      482,  482,  482,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  484,  485,  486,  486,  486,  486,  487,  488,
      489,  489,  489,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  491,  491

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   32,   34,   35,   36,
       37,   38,   39,   40,   37,   41,   37,   42,   43,   44,
       40,   45,   46,   37,   40,   40,   40,   47,   40,   48,
       31,   49,   50,   51,   52,   53,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   40,   63,   64,   65,   66,
       67,   68,   40,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   31,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    2,    3,    4,    3,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    1,    1,    1,    1,    1,    7,
        1,    6,    6,    6,    6,    6,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    1,    1,
        1,    8,    1,    6,    6,    6,    6,    6,    6,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    6,    5,    6,    1,    1,    1
    } ;

static const flex_int16_t yy_base[741] =
    {   0,
        0,   79,   79,   81,    0,    0, 1541, 1540,   82,   84,
      121,   95, 1539, 1538, 1537, 1536, 1535, 1534,   86,   88,
       94,  102,  138,  146, 1537, 1546, 1546, 1546, 1508, 1546,
     1546,    0, 1507,   91,  198,  106,   98,  112,  166, 1519,
      102,  258, 1508,  197,  121,  132,    0,    0,   78,  232,
      107,  142,  225,  245, 1468,  329, 1546, 1546, 1511, 1515,
     1546, 1546, 1546, 1546, 1546, 1546,  174,  333,  228,  233,
        0, 1504, 1546,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1546,    0, 1546,    0, 1546,    0,  408,  177,
       97, 1546,  186,  195, 1546,  210,    0, 1546, 1517, 1546,

     1546,  266,  399,  261,  421,  446, 1546,  289,  304, 1546,
     1546, 1546, 1546, 1546, 1546, 1498, 1546, 1546, 1497, 1496,
     1546, 1546,  281, 1546,  323,    0,  343, 1546, 1454, 1546,
     1546, 1546, 1494,  274, 1546,  242, 1546, 1546,  291,    0,
        0, 1546, 1546,  337, 1464, 1455, 1451, 1546, 1546, 1546,
     1546, 1546,  366,  453,  471, 1457, 1460, 1459,   67,  233,
       79, 1454, 1448, 1445, 1455, 1440, 1449,  132, 1546, 1546,
     1546, 1546, 1546,  303,  328,  419,  351,  431,    0,    0,
        0,    0,  543,  623,    0, 1546, 1546,    0, 1546, 1546,
        0,    0,    0,    0, 1546, 1546, 1546,  531,  443,  580,

      534, 1458,  300,    0,  611,  590,  411,  546, 1546, 1546,
     1546,  497,  642, 1433,  692,  566,  639, 1546, 1480, 1546,
     1546, 1546, 1546, 1479, 1447, 1448, 1437,  164,  263, 1444,
     1433,  163, 1435, 1440, 1435,  293, 1428, 1427,  110,  296,
     1440, 1429,  304,  316, 1424, 1425, 1427,  333, 1433, 1476,
     1475, 1474, 1473, 1472, 1471, 1470, 1469, 1468, 1467, 1466,
     1465, 1464, 1463, 1462, 1461,    0,  764,    0,  647,  683,
     1422,    0,  726, 1417, 1406,    0,  710, 1546, 1401,  687,
     1546, 1546, 1416, 1401, 1397,  318,  116, 1413, 1410, 1407,
     1402, 1399,  394, 1408, 1407,  205, 1405,  415, 1401, 1401,

     1393, 1398, 1383, 1388, 1393, 1394, 1383, 1392, 1382, 1390,
     1383, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1392, 1374,  576,
      758, 1372, 1374, 1384,  400,  553,  389, 1375, 1383, 1367,
     1372, 1361, 1381,  579, 1376, 1370, 1370, 1374, 1372, 1371,
     1371, 1356,  402, 1359, 1370, 1360, 1353, 1354, 1352, 1355,
     1361, 1357, 1349, 1356,  775, 1352, 1348, 1358, 1341,  427,
     1360, 1353, 1346, 1351, 1356, 1343,    0,  677,  682, 1348,
     1347, 1340,  687,  695, 1344, 1345,  467, 1333, 1333, 1341,
     1344, 1339, 1340, 1329,  715, 1339, 1321, 1334, 1320, 1319,

     1318, 1324,    0,  509, 1324, 1327, 1314,  735, 1319, 1325,
        0,  740, 1330, 1305, 1316,    0,  767,    0,  783,  802,
     1321,    0,  527, 1309, 1311,  806, 1312, 1305, 1320, 1315,
        0,  816,  820, 1302, 1301, 1318, 1311, 1546, 1297, 1309,
     1304, 1309,    0,  826, 1286, 1293, 1269, 1255, 1264,    0,
      830,  834, 1255, 1239,    0,  843, 1233, 1219, 1217, 1217,
        0,  847, 1260, 1195, 1183, 1185, 1181, 1149, 1151,  509,
     1152, 1133, 1126, 1118, 1119,    0,  851, 1096, 1102,  855,
     1107, 1095, 1074, 1069, 1059, 1063, 1042,  203, 1038, 1053,
     1050, 1035,  975,  965,  962,  961,  970,  958,  961,  859,

      946, 1546,  943,  924,  863,  918, 1546,  918,  867,  925,
      915,  921,  900,  894,  904,  895,  901,  878,  891,  884,
      881,  871,  864,  862,  875,  873,  854,  814,  848,  856,
      841,  841,  844,  841,  823,  836,  815,  812,  803,  818,
      791,  805,  797,  801,  785,  789,  782,  786,  882,  780,
      780,  773,  762,  767,  751,  758,  738,  732,  748,  727,
      713,  706,  714,  706,  714,  691,    0,  887,  891,  689,
      707,  683,  684,  685,  675,  678,  895,  659,  673,  652,
      660,  648,  629,  621,  619,  899,  614,  614,  600,  604,
      608,  586,  903,  907,  584,  570,  570,  911,  915,  919,

      572,  564,  560,  560,  923,  546,  560,  553,  927,  542,
      520,  515,    0,  931,    0,  935,    0,  941,  505,  495,
      494,  500,    0,  945,  501,  484,  493,  480,  462,  462,
      446,  949,  953,  432, 1546,  434,  426,  957,  435,  420,
      961,    0,  965,    0,  969,  427,  415,  423,    0,  973,
      409,  392,    0,  977,  981,  386,  398,  385,  373,  985,
      422,  351,  346,  355,  345,  249,  335,  989,  325,  301,
      993,  997,    0, 1001,  299, 1005, 1009, 1546,    0, 1013,
      332, 1017, 1546,  309, 1002, 1013,  306,  227,  180,  170,
      121,   87,   71,  101,  110, 1546, 1546, 1037, 1045, 1053,

     1061, 1069, 1077, 1085, 1093, 1097, 1101, 1109, 1117, 1125,
     1133, 1141, 1149, 1155, 1162, 1165, 1173, 1181, 1189, 1197,
     1205, 1213, 1221, 1229, 1237, 1245, 1253, 1261, 1269, 1277,
     1285, 1293, 1301, 1309, 1317, 1325, 1333, 1341, 1349, 1357
    } ;

static const flex_int16_t yy_def[741] =
    {   0,
      697,    1,  698,  698,  699,  699,  700,  700,  701,  701,
        1,   11,  702,  702,  703,  703,  704,  704,  705,  705,
        1,    1,  699,  699,  697,  697,  697,  697,  697,  697,
      697,  706,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  707,  708,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
       42,  697,  697,  707,  707,  707,  707,  707,  707,  707,
      707,  709,  697,  710,  697,  711,  697,  712,  713,   42,
       42,  697,  707,  707,  697,  697,  706,  697,  697,  697,

      697,  697,  697,  714,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,   42,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  707,
      708,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  709,  710,
      711,  712,  713,  715,   42,  697,  697,   42,  697,  697,
      707,  707,  707,  707,  697,  697,  697,  697,  697,  697,

      697,  697,  714,  716,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  717,  715,  267,  697,  697,
      697,  716,  697,  697,  697,  215,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  718,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  719,
      697,  697,  697,  697,  697,  697,  718,  718,  720,  697,
      697,  697,  721,  722,  697,  697,  723,  697,  697,  697,
      697,  697,  697,  697,  724,  697,  697,  697,  697,  697,

      697,  697,  719,  719,  697,  697,  697,  725,  697,  697,
      720,  720,  697,  697,  697,  721,  721,  722,  722,  726,
      697,  723,  723,  697,  697,  727,  697,  697,  697,  697,
      724,  724,  728,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  725,  725,  697,  697,  697,  697,  697,  726,
      726,  729,  697,  697,  727,  727,  697,  697,  697,  697,
      728,  728,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  729,  729,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  730,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  730,  730,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  731,  732,  733,

      697,  697,  697,  697,  734,  697,  697,  697,  697,  697,
      697,  697,  731,  731,  732,  732,  733,  733,  697,  697,
      697,  697,  734,  734,  697,  697,  697,  697,  697,  697,
      697,  735,  736,  697,  697,  697,  697,  737,  697,  697,
      738,  735,  735,  736,  736,  697,  697,  697,  737,  737,
      697,  697,  738,  738,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  739,  697,  697,
      697,  740,  739,  739,  697,  697,  697,  697,  740,  740,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,    0,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697
    } ;

static const flex_int16_t yy_nxt[1627] =
    {   0,
       26,   27,   27,   28,   27,   29,   30,   31,   32,   33,
       34,   35,   36,   31,   37,   38,   31,   39,   40,   41,
       42,   42,   42,   42,   43,   31,   44,   45,   46,   31,
       31,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   48,   31,
       49,   47,   50,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   31,   51,   52,
       53,   54,   58,   54,   58,   65,   55,   65,   66,   61,
       66,   61,   89,   59,   89,   59,   53,   54,   60,   54,

       60,   99,   55,   53,   54,  142,   54,  108,  108,   55,
      108,  110,  111,  696,   90,   91,  122,  188,  100,  695,
      109,  123,   90,   91,  236,  112,  113,  114,  237,  124,
       67,   56,   67,   68,  148,   69,  115,  240,   70,  116,
      694,   71,   71,   92,  241,   72,   73,   56,  136,  137,
       73,   92,  150,   74,   56,  693,   75,  143,   76,  138,
      139,   77,   78,  297,   79,   80,  298,   81,   93,  297,
       94,  189,  336,  190,   95,   74,   93,  171,   94,   75,
      172,   76,   95,  117,   77,  149,   78,  692,   79,   80,
      118,   95,  151,  119,  120,   81,   95,  248,  185,   95,

       95,  249,   95,   95,   95,   95,  191,  192,   95,   95,
       95,   95,  132,   95,  133,  193,  194,   95,  101,  101,
      152,  286,  173,  134,  135,  237,  153,  153,  289,  153,
      102,  103,  249,  144,  144,  104,  144,  195,  691,  196,
      105,  110,  111,  106,  101,  101,  153,  153,  690,  153,
      117,  186,  102,  187,  103,  112,  113,  118,  104,  491,
      119,  120,  344,  203,  105,  203,  345,  106,  198,  221,
      198,  222,  101,  492,  101,  107,  125,  154,  126,  126,
      126,  126,  212,  212,  689,  213,  199,  199,  145,  146,
      108,  108,  127,  108,  128,  199,  238,  155,  239,  147,

      219,  220,  203,  207,  203,  208,  208,  670,  208,  126,
      688,  128,  199,  199,  671,  127,  129,  209,  223,  224,
      128,  685,  129,  129,  250,  129,  238,  130,  287,  129,
      144,  144,  251,  144,  108,  108,  684,  108,  144,  144,
      199,  144,  199,  215,  215,  215,  215,  109,  253,  252,
      214,  293,  299,  174,  175,  681,  294,  254,  216,  676,
      216,  300,  176,  217,  217,  217,  217,  153,  153,  305,
      153,  260,  261,  303,  255,  304,  335,  252,  675,  177,
      262,  294,  285,  157,  158,  159,  160,  178,  309,  310,
      161,  370,  162,  370,  163,  672,  164,  165,  166,  167,

      168,  200,  255,  200,  387,  669,  387,  177,  182,  182,
      182,  668,  208,  208,  184,  208,  667,  666,  154,  201,
      201,  201,  201,  205,  209,  205,  665,  182,  202,  404,
      664,  404,  182,  182,  182,  182,  182,  182,  182,  256,
      257,  206,  206,  206,  663,  202,  202,  340,  258,  662,
      206,  263,  264,  369,  661,  341,  182,  182,  182,  182,
      182,  341,  659,  269,  269,  259,  347,  206,  206,  423,
      348,  423,  269,  202,  658,  202,  349,  265,  102,  103,
      657,  656,  333,  104,  655,  182,  182,  182,  105,  269,
      269,  652,  651,  259,  269,  206,  648,  206,  212,  212,

      102,  212,  103,  647,  646,  265,  104,  157,  158,  228,
      229,  404,  105,  404,  230,  641,  640,  269,  163,  269,
      231,  165,  166,  167,  232,  157,  158,  228,  229,  423,
      639,  423,  230,  198,  162,  198,  163,  638,  231,  165,
      166,  167,  232,  182,  182,  182,  637,  208,  208,  184,
      208,  199,  199,  636,  270,  270,  270,  270,  635,  209,
      199,  634,  182,  633,  632,  491,  214,  182,  182,  182,
      182,  182,  182,  182,  486,  631,  630,  199,  199,  492,
      378,  378,  200,  378,  200,  270,  217,  217,  217,  217,
      629,  182,  182,  182,  182,  182,  331,  331,  331,  331,

      201,  201,  201,  201,  347,  199,  628,  199,  348,  202,
      273,  273,  273,  205,  349,  205,  627,  626,  625,  273,
      182,  182,  182,  266,  266,  266,  202,  202,  622,  268,
      621,  206,  206,  206,  620,  619,  273,  273,  612,  611,
      206,  273,  266,  212,  212,  610,  212,  266,  266,  266,
      266,  266,  266,  266,  202,  608,  202,  206,  206,  280,
      280,  280,  280,  607,  273,  606,  273,  269,  269,  605,
      604,  266,  266,  266,  266,  266,  269,  603,  378,  378,
      274,  378,  602,  412,  412,  206,  412,  206,  417,  417,
      280,  417,  601,  269,  269,  600,  419,  419,  269,  419,

      266,  266,  266,  270,  270,  270,  270,  280,  280,  280,
      280,  214,  276,  276,  276,  276,  432,  432,  599,  432,
      598,  269,  597,  269,  596,  330,  277,  330,  278,  595,
      331,  331,  331,  331,  270,  593,  444,  444,  280,  444,
      592,  412,  412,  276,  412,  278,  273,  273,  273,  277,
      279,  591,  590,  589,  278,  273,  279,  279,  588,  279,
      587,  130,  585,  279,  266,  266,  266,  584,  417,  417,
      268,  417,  273,  273,  583,  582,  581,  273,  365,  365,
      365,  365,  580,  266,  419,  419,  579,  419,  266,  266,
      266,  266,  266,  266,  266,  365,  365,  365,  365,  578,

      273,  577,  273,  451,  451,  576,  451,  456,  456,  365,
      456,  575,  266,  266,  266,  266,  266,  432,  432,  574,
      432,  462,  462,  573,  462,  572,  365,  444,  444,  571,
      444,  451,  451,  570,  451,  477,  477,  569,  477,  566,
      565,  266,  266,  266,  456,  456,  564,  456,  462,  462,
      563,  462,  477,  477,  562,  477,  500,  500,  561,  500,
      500,  500,  560,  500,  522,  522,  559,  522,  525,  525,
      543,  525,  522,  522,  558,  522,  525,  525,  557,  525,
      556,  544,  555,  568,  568,  545,  568,  554,  568,  568,
      546,  568,  586,  586,  553,  586,  594,  594,  552,  594,

      586,  586,  551,  586,  609,  609,  550,  609,  594,  594,
      549,  594,  614,  614,  548,  614,  616,  616,  547,  616,
      618,  618,  542,  618,  624,  624,  541,  624,  609,  609,
      540,  609,  614,  614,  539,  614,  616,  616,  537,  616,
      536,  538,  618,  618,  535,  618,  624,  624,  534,  624,
      643,  643,  533,  643,  645,  645,  532,  645,  650,  650,
      531,  650,  654,  654,  530,  654,  643,  643,  529,  643,
      645,  645,  528,  645,  650,  650,  527,  650,  654,  654,
      526,  654,  660,  660,  524,  660,  660,  660,  523,  660,
      674,  674,  521,  674,  677,  677,  678,  677,  680,  680,

      520,  680,  674,  674,  519,  674,  682,  682,  683,  682,
      677,  677,  678,  677,  680,  680,  518,  680,  682,  682,
      683,  682,  686,  686,  686,  686,  687,  517,  516,  515,
      514,  513,  512,  686,  686,  686,  686,   57,   57,   57,
       57,   57,   57,   57,   57,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   62,   62,   62,   62,   62,   62,
       62,   64,   64,   64,   64,   64,   64,   64,   64,   82,
       82,   82,   82,   82,   82,   82,   82,   84,   84,   84,
       84,   84,   84,   84,   84,   86,   86,   86,   86,   86,
       86,   86,   86,   88,   88,   88,   88,   88,   88,   88,

       88,   97,   97,  511,   97,  140,  140,  510,  140,  141,
      509,  508,  507,  141,  141,  141,  141,  179,  179,  179,
      506,  179,  179,  179,  179,  180,  180,  180,  505,  180,
      180,  180,  180,  181,  181,  181,  504,  181,  181,  181,
      181,  182,  182,  182,  503,  182,  182,  182,  182,  183,
      183,  183,  502,  183,  183,  183,  183,  204,  501,  499,
      204,  204,  267,  267,  267,  498,  267,  267,  267,  267,
      272,  272,  272,  266,  266,  266,  497,  266,  266,  266,
      266,  377,  377,  377,  496,  377,  377,  377,  377,  403,
      403,  403,  495,  403,  403,  403,  403,  411,  411,  411,

      494,  411,  411,  411,  411,  416,  416,  416,  493,  416,
      416,  416,  416,  418,  418,  418,  490,  418,  418,  418,
      418,  422,  422,  422,  489,  422,  422,  422,  422,  431,
      431,  431,  488,  431,  431,  431,  431,  443,  443,  443,
      487,  443,  443,  443,  443,  450,  450,  450,  486,  450,
      450,  450,  450,  455,  455,  455,  485,  455,  455,  455,
      455,  461,  461,  461,  484,  461,  461,  461,  461,  476,
      476,  476,  483,  476,  476,  476,  476,  567,  567,  567,
      482,  567,  567,  567,  567,  613,  613,  613,  481,  613,
      613,  613,  613,  615,  615,  615,  480,  615,  615,  615,

      615,  617,  617,  617,  479,  617,  617,  617,  617,  623,
      623,  623,  478,  623,  623,  623,  623,  642,  642,  642,
      475,  642,  642,  642,  642,  644,  644,  644,  474,  644,
      644,  644,  644,  649,  649,  649,  473,  649,  649,  649,
      649,  653,  653,  653,  472,  653,  653,  653,  653,  673,
      673,  673,  471,  673,  673,  673,  673,  679,  679,  679,
      470,  679,  679,  679,  679,  469,  468,  467,  466,  465,
      464,  463,  460,  459,  458,  457,  454,  453,  452,  449,
      448,  447,  446,  445,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  430,  429,  428,  427,  426,  425,

      424,  421,  420,  415,  414,  413,  410,  409,  408,  407,
      406,  405,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  386,  385,  384,
      383,  382,  381,  380,  379,  376,  375,  374,  373,  372,
      371,  368,  367,  366,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  346,
      343,  342,  339,  338,  337,  309,  305,  334,  333,  332,
      130,  329,  328,  271,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  308,  307,  306,  302,  301,  296,  295,  292,  291,

      290,  288,  240,  285,  284,  283,  282,  281,  275,  271,
      247,  246,  245,  244,  243,  242,  235,  234,  233,  227,
      226,  225,  218,  130,  211,  210,  210,  197,  131,  170,
      169,  156,  131,  121,   98,   96,  697,   87,   87,   85,
       85,   83,   83,   63,   63,   25,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697
    } ;

static const flex_int16_t yy_chk[1627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    3,    2,    4,    9,    2,   10,    9,   19,
       10,   20,   19,    3,   20,    4,   12,   12,    3,   12,

        4,   34,   12,   22,   22,   49,   22,   36,   36,   22,
       36,   37,   37,  695,   21,   21,   41,   91,   34,  694,
       36,   41,   22,   22,  159,   37,   37,   38,  159,   41,
        9,    2,   10,   11,   51,   11,   38,  161,   11,   38,
      693,   11,   11,   21,  161,   11,   11,   12,   45,   45,
       11,   22,   52,   11,   22,  692,   11,   49,   11,   46,
       46,   11,   11,  239,   11,   11,  239,   11,   21,  287,
       21,   91,  287,   91,   23,   11,   22,   67,   22,   11,
       67,   11,   24,   39,   11,   51,   11,  691,   11,   11,
       39,   23,   52,   39,   39,   11,   23,  168,   90,   24,

       23,  168,   23,   23,   24,   23,   93,   93,   24,   23,
       24,   24,   44,   24,   44,   94,   94,   24,   35,   35,
       52,  228,   67,   44,   44,  228,   53,   53,  232,   53,
       35,   35,  232,   50,   50,   35,   50,   96,  690,   96,
       35,   69,   69,   35,   35,   35,   54,   54,  689,   54,
       70,   90,   35,   90,   35,   69,   69,   70,   35,  488,
       70,   70,  296,  104,   35,  104,  296,   35,  102,  136,
      102,  136,   35,  488,   35,   35,   42,   53,   42,   42,
       42,   42,  123,  123,  688,  123,  102,  102,   50,   50,
      108,  108,   42,  108,   42,  102,  160,   54,  160,   50,

      134,  134,  203,  108,  203,  109,  109,  666,  109,   42,
      687,   42,  102,  102,  666,   42,   42,  109,  139,  139,
       42,  684,   42,   42,  174,   42,  229,   42,  229,   42,
       56,   56,  174,   56,   68,   68,  681,   68,  144,  144,
      102,  144,  102,  125,  125,  125,  125,   68,  175,  174,
      123,  236,  240,   68,   68,  675,  236,  175,  127,  670,
      127,  240,   68,  127,  127,  127,  127,  153,  153,  244,
      153,  177,  177,  243,  175,  243,  286,  174,  669,   68,
      177,  286,  244,   56,   56,   56,   56,   68,  248,  248,
       56,  337,   56,  337,   56,  667,   56,   56,   56,   56,

       56,  103,  175,  103,  353,  665,  353,   68,   89,   89,
       89,  664,  207,  207,   89,  207,  663,  662,  153,  103,
      103,  103,  103,  105,  207,  105,  661,   89,  103,  370,
      659,  370,   89,   89,   89,   89,   89,   89,   89,  176,
      176,  105,  105,  105,  658,  103,  103,  293,  176,  657,
      105,  178,  178,  335,  656,  293,   89,   89,   89,   89,
       89,  335,  652,  199,  199,  176,  298,  105,  105,  387,
      298,  387,  199,  103,  651,  103,  298,  178,  106,  106,
      648,  647,  298,  106,  646,   89,   89,   89,  106,  199,
      199,  640,  639,  176,  199,  105,  637,  105,  212,  212,

      106,  212,  106,  636,  634,  178,  106,  154,  154,  154,
      154,  404,  106,  404,  154,  631,  630,  199,  154,  199,
      154,  154,  154,  154,  154,  155,  155,  155,  155,  423,
      629,  423,  155,  198,  155,  198,  155,  628,  155,  155,
      155,  155,  155,  183,  183,  183,  627,  208,  208,  183,
      208,  198,  198,  626,  201,  201,  201,  201,  625,  208,
      198,  622,  183,  621,  620,  470,  212,  183,  183,  183,
      183,  183,  183,  183,  470,  619,  612,  198,  198,  470,
      344,  344,  200,  344,  200,  201,  216,  216,  216,  216,
      611,  183,  183,  183,  183,  183,  330,  330,  330,  330,

      200,  200,  200,  200,  336,  198,  610,  198,  336,  200,
      206,  206,  206,  205,  336,  205,  608,  607,  606,  206,
      183,  183,  183,  184,  184,  184,  200,  200,  604,  184,
      603,  205,  205,  205,  602,  601,  206,  206,  597,  596,
      205,  206,  184,  213,  213,  595,  213,  184,  184,  184,
      184,  184,  184,  184,  200,  592,  200,  205,  205,  217,
      217,  217,  217,  591,  206,  590,  206,  269,  269,  589,
      588,  184,  184,  184,  184,  184,  269,  587,  378,  378,
      213,  378,  585,  379,  379,  205,  379,  205,  383,  383,
      217,  383,  584,  269,  269,  583,  384,  384,  269,  384,

      184,  184,  184,  270,  270,  270,  270,  280,  280,  280,
      280,  213,  215,  215,  215,  215,  395,  395,  582,  395,
      581,  269,  580,  269,  579,  277,  215,  277,  215,  578,
      277,  277,  277,  277,  270,  576,  408,  408,  280,  408,
      575,  412,  412,  215,  412,  215,  273,  273,  273,  215,
      215,  574,  573,  572,  215,  273,  215,  215,  571,  215,
      570,  215,  566,  215,  267,  267,  267,  565,  417,  417,
      267,  417,  273,  273,  564,  563,  562,  273,  331,  331,
      331,  331,  561,  267,  419,  419,  560,  419,  267,  267,
      267,  267,  267,  267,  267,  365,  365,  365,  365,  559,

      273,  558,  273,  420,  420,  557,  420,  426,  426,  331,
      426,  556,  267,  267,  267,  267,  267,  432,  432,  555,
      432,  433,  433,  554,  433,  553,  365,  444,  444,  552,
      444,  451,  451,  551,  451,  452,  452,  550,  452,  548,
      547,  267,  267,  267,  456,  456,  546,  456,  462,  462,
      545,  462,  477,  477,  544,  477,  480,  480,  543,  480,
      500,  500,  542,  500,  505,  505,  541,  505,  509,  509,
      528,  509,  522,  522,  540,  522,  525,  525,  539,  525,
      538,  528,  537,  549,  549,  528,  549,  536,  568,  568,
      528,  568,  569,  569,  535,  569,  577,  577,  534,  577,

      586,  586,  533,  586,  593,  593,  532,  593,  594,  594,
      531,  594,  598,  598,  530,  598,  599,  599,  529,  599,
      600,  600,  527,  600,  605,  605,  526,  605,  609,  609,
      524,  609,  614,  614,  523,  614,  616,  616,  521,  616,
      520,  522,  618,  618,  519,  618,  624,  624,  518,  624,
      632,  632,  517,  632,  633,  633,  516,  633,  638,  638,
      515,  638,  641,  641,  514,  641,  643,  643,  513,  643,
      645,  645,  512,  645,  650,  650,  511,  650,  654,  654,
      510,  654,  655,  655,  508,  655,  660,  660,  506,  660,
      668,  668,  504,  668,  671,  671,  671,  671,  672,  672,

      503,  672,  674,  674,  501,  674,  676,  676,  676,  676,
      677,  677,  677,  677,  680,  680,  499,  680,  682,  682,
      682,  682,  685,  685,  685,  685,  686,  498,  497,  496,
      495,  494,  493,  686,  686,  686,  686,  698,  698,  698,
      698,  698,  698,  698,  698,  699,  699,  699,  699,  699,
      699,  699,  699,  700,  700,  700,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  702,  702,  702,  703,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704,  704,  705,  705,  705,  705,  705,  705,  705,

      705,  706,  706,  492,  706,  707,  707,  491,  707,  708,
      490,  489,  487,  708,  708,  708,  708,  709,  709,  709,
      486,  709,  709,  709,  709,  710,  710,  710,  485,  710,
      710,  710,  710,  711,  711,  711,  484,  711,  711,  711,
      711,  712,  712,  712,  483,  712,  712,  712,  712,  713,
      713,  713,  482,  713,  713,  713,  713,  714,  481,  479,
      714,  714,  715,  715,  715,  478,  715,  715,  715,  715,
      716,  716,  716,  717,  717,  717,  475,  717,  717,  717,
      717,  718,  718,  718,  474,  718,  718,  718,  718,  719,
      719,  719,  473,  719,  719,  719,  719,  720,  720,  720,

      472,  720,  720,  720,  720,  721,  721,  721,  471,  721,
      721,  721,  721,  722,  722,  722,  469,  722,  722,  722,
      722,  723,  723,  723,  468,  723,  723,  723,  723,  724,
      724,  724,  467,  724,  724,  724,  724,  725,  725,  725,
      466,  725,  725,  725,  725,  726,  726,  726,  465,  726,
      726,  726,  726,  727,  727,  727,  464,  727,  727,  727,
      727,  728,  728,  728,  463,  728,  728,  728,  728,  729,
      729,  729,  460,  729,  729,  729,  729,  730,  730,  730,
      459,  730,  730,  730,  730,  731,  731,  731,  458,  731,
      731,  731,  731,  732,  732,  732,  457,  732,  732,  732,

      732,  733,  733,  733,  454,  733,  733,  733,  733,  734,
      734,  734,  453,  734,  734,  734,  734,  735,  735,  735,
      449,  735,  735,  735,  735,  736,  736,  736,  448,  736,
      736,  736,  736,  737,  737,  737,  447,  737,  737,  737,
      737,  738,  738,  738,  446,  738,  738,  738,  738,  739,
      739,  739,  445,  739,  739,  739,  739,  740,  740,  740,
      442,  740,  740,  740,  740,  441,  440,  439,  437,  436,
      435,  434,  430,  429,  428,  427,  425,  424,  421,  415,
      414,  413,  410,  409,  407,  406,  405,  402,  401,  400,
      399,  398,  397,  396,  394,  393,  392,  391,  390,  389,

      388,  386,  385,  382,  381,  380,  376,  375,  374,  373,
      372,  371,  369,  368,  367,  366,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  352,  351,  350,
      349,  348,  347,  346,  345,  343,  342,  341,  340,  339,
      338,  334,  333,  332,  329,  328,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  297,
      295,  294,  292,  291,  290,  289,  288,  285,  284,  283,
      279,  275,  274,  271,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  247,  246,  245,  242,  241,  238,  237,  235,  234,

      233,  231,  230,  227,  226,  225,  224,  219,  214,  202,
      167,  166,  165,  164,  163,  162,  158,  157,  156,  147,
      146,  145,  133,  129,  120,  119,  116,   99,   72,   60,
       59,   55,   43,   40,   33,   29,   25,   18,   17,   16,
       15,   14,   13,    8,    7,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexor.lex"
#line 6 "lexor.lex"
/*
 * Copyright (c) 1998-2021 Stephen Williams (steve@icarus.com)
 *
 *    This source code is free software; you can redistribute it
 *    and/or modify it in source code form under the terms of the GNU
 *    General Public License as published by the Free Software
 *    Foundation; either version 2 of the License, or (at your option)
 *    any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

# include "config.h"

      //# define YYSTYPE lexval

# include  <iostream>
# include  "compiler.h"
# include  "parse_misc.h"
# include  "parse_api.h"
# include  "parse.h"
# include  <cctype>
# include  <cstring>
# include  "lexor_keyword.h"
# include  "discipline.h"
# include  <list>

# define YY_USER_INIT reset_lexor();
# define yylval VLlval

# define YY_NO_INPUT

/*
 * Lexical location information is passed in the yylloc variable to th
 * parser. The file names, strings, are kept in a list so that I can
 * re-use them. The set_file_name function will return a pointer to
 * the name as it exists in the list (and delete the passed string.)
 * If the name is new, it will be added to the list.
 */
extern YYLTYPE yylloc;

char* yytext_string_filter(const char*str, size_t str_len)
{
      if (str == 0) return 0;
      char*buf = new char[str_len+1];
      size_t didx = 0;
      for (size_t sidx = 0 ; sidx < str_len ; sidx += 1, didx += 1) {
	    if (str[sidx] == 0) {
		  VLerror(yylloc, "error: Found nil (\\000) in string literal, replacing with space (\\015) character.");
		  buf[didx] = ' ';
	    } else if (str[sidx] == '\\') { /* Skip \\\n */
		  if ((sidx+1 < str_len) && (str[sidx+1] == '\n')) {
			sidx += 1;
			didx -= 1;
		  } else {
			buf[didx] = str[sidx];
		  }
	    } else {
		  buf[didx] = str[sidx];
	    }
      }
      buf[didx] = 0;
      return buf;
}

char* strdupnew(char const *str)
{
       return str ? strcpy(new char [strlen(str)+1], str) : 0;
}

static const char* set_file_name(char*text)
{
      perm_string path = filename_strings.make(text);
      delete[]text;

	/* Check this file name with the list of library file
	   names. If there is a match, then turn on the
	   pform_library_flag. This is how the parser knows that
	   modules declared in this file are library modules. */
      pform_library_flag = library_file_map[path];
      return path;
}

void reset_lexor();
static void line_directive();
static void line_directive2();
static void reset_all();

verinum*make_unsized_binary(const char*txt);
verinum*make_undef_highz_dec(const char*txt);
verinum*make_unsized_dec(const char*txt);
verinum*make_unsized_octal(const char*txt);
verinum*make_unsized_hex(const char*txt);

static int dec_buf_div2(char *buf);

static void process_timescale(const char*txt);
static void process_ucdrive(const char*txt);

static list<int> keyword_mask_stack;

static int comment_enter;
static bool in_module = false;
static bool in_UDP = false;
bool in_celldefine = false;
UCDriveType uc_drive = UCD_NONE;

/*
 * The parser sometimes needs to indicate to the lexor that the next
 * identifier needs to be understood in the context of a package. The
 * parser feeds back that left context with calls to the
 * lex_in_package_scope.
 */
static PPackage* in_package_scope = 0;
void lex_in_package_scope(PPackage*pkg)
{
      in_package_scope = pkg;
}

#line 1490 "<stdout>"

#line 1492 "<stdout>"

#define INITIAL 0
#define CCOMMENT 1
#define PCOMMENT 2
#define LCOMMENT 3
#define CSTRING 4
#define UDPTABLE 5
#define PPTIMESCALE 6
#define PPUCDRIVE 7
#define PPDEFAULT_NETTYPE 8
#define PPBEGIN_KEYWORDS 9
#define EDGES 10
#define REAL_SCALE 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 152 "lexor.lex"


#line 155 "lexor.lex"
  /* Recognize the various line directives. */
#line 1732 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 698 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 697 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 156 "lexor.lex"
{ line_directive(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 157 "lexor.lex"
{ line_directive2(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 159 "lexor.lex"
{ ; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 160 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
/* C++ style comments start with / / and run to the end of the
     current line. These are very easy to handle. The meta-comments
     format is a little more tricky to handle, but do what we can. */
/* The lexor detects "// synthesis translate_on/off" meta-comments,
     we handle them here by turning on/off a flag. The pform uses
     that flag to attach implicit attributes to "initial" and
     "always" statements. */
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 171 "lexor.lex"
{ pre_process_failed(yytext); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 172 "lexor.lex"
{ pform_mc_translate_on(true); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 173 "lexor.lex"
{ pform_mc_translate_on(false); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 174 "lexor.lex"
{ comment_enter = YY_START; BEGIN(LCOMMENT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 175 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 176 "lexor.lex"
{ yylloc.first_line += 1; BEGIN(comment_enter); }
	YY_BREAK
/* The contents of C-style comments are ignored, like white space. */
case 11:
YY_RULE_SETUP
#line 181 "lexor.lex"
{ comment_enter = YY_START; BEGIN(CCOMMENT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 182 "lexor.lex"
{ ; }
	YY_BREAK
/* Check for a possible nested comment. */
case 13:
YY_RULE_SETUP
#line 184 "lexor.lex"
{ VLerror(yylloc, "error: Possible nested comment."); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 185 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 186 "lexor.lex"
{ BEGIN(comment_enter); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 189 "lexor.lex"
{ return K_PSTAR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 190 "lexor.lex"
{ return K_STARP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 191 "lexor.lex"
{ return K_DOTSTAR; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 192 "lexor.lex"
{ return K_LS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 193 "lexor.lex"
{ return K_LS; /* Note: Functionally, <<< is the same as <<. */}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 194 "lexor.lex"
{ return K_RS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 195 "lexor.lex"
{ return K_RSS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 196 "lexor.lex"
{ return K_POW; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 197 "lexor.lex"
{ return K_LE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 198 "lexor.lex"
{ return K_GE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 199 "lexor.lex"
{ return K_EG; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 200 "lexor.lex"
{
			/*
			 * Resolve the ambiguity between the += assignment
			 * operator and +=> polarity edge path operator
			 *
			 * +=> should be treated as two separate tokens '+' and
			 * '=>' (K_EG), therefore we only consume the first
			 * character of the matched pattern i.e. either + or -
			 * and push back the rest of the matches text (=>) in
			 * the input stream.
			 */
			yyless(1);
			return yytext[0];
		}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 214 "lexor.lex"
{ return K_SG; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 215 "lexor.lex"
{ return K_EQ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 216 "lexor.lex"
{ return K_NE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 217 "lexor.lex"
{ return K_CEQ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 218 "lexor.lex"
{ return K_CNE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 219 "lexor.lex"
{ return K_WEQ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "lexor.lex"
{ return K_WNE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 221 "lexor.lex"
{ return K_LOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "lexor.lex"
{ return K_LAND; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 223 "lexor.lex"
{ return K_LEQUIV; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "lexor.lex"
{ return K_TAND; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 225 "lexor.lex"
{ return K_NOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 226 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 227 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 228 "lexor.lex"
{ return K_NAND; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 229 "lexor.lex"
{ return K_TRIGGER; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 230 "lexor.lex"
{ return K_NB_TRIGGER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 231 "lexor.lex"
{ return K_PO_POS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 232 "lexor.lex"
{ return K_PO_NEG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "lexor.lex"
{ return K_CONTRIBUTE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "lexor.lex"
{ return K_PLUS_EQ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 235 "lexor.lex"
{ return K_MINUS_EQ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 236 "lexor.lex"
{ return K_MUL_EQ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 237 "lexor.lex"
{ return K_DIV_EQ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 238 "lexor.lex"
{ return K_MOD_EQ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 239 "lexor.lex"
{ return K_AND_EQ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 240 "lexor.lex"
{ return K_OR_EQ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 241 "lexor.lex"
{ return K_XOR_EQ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 242 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 243 "lexor.lex"
{ return K_RS_EQ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 244 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 245 "lexor.lex"
{ return K_RSS_EQ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 246 "lexor.lex"
{ return K_INCR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 247 "lexor.lex"
{return K_DECR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 248 "lexor.lex"
{ return K_LP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 249 "lexor.lex"
{ return K_SCOPE_RES; }
	YY_BREAK
/* Watch out for the tricky case of (*). Cannot parse this as "(*"
     and ")", but since I know that this is really ( * ), replace it
     with "*" and return that. */
case 64:
YY_RULE_SETUP
#line 254 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "lexor.lex"
{ BEGIN(0); return yytext[0]; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "lexor.lex"
{ BEGIN(CSTRING); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "lexor.lex"
{ yymore(); /* Catch \\, which is a \ escaping itself */ }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "lexor.lex"
{ yymore(); /* Catch \", which is an escaped quote */ }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 262 "lexor.lex"
{ yymore(); /* Catch \\n, which will be filtered out */
		yylloc.first_line += 1; }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 264 "lexor.lex"
{ BEGIN(0);
		yylval.text = yytext_string_filter(yytext, yyleng);
		VLerror(yylloc, "error: Missing closing quote for string.");
		yylloc.first_line += 1;
		return STRING; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 269 "lexor.lex"
{ BEGIN(0);
		yylval.text = yytext_string_filter(yytext, yyleng);
		yylval.text[strlen(yylval.text)-1] = 0;
		return STRING; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 273 "lexor.lex"
{ yymore(); }
	YY_BREAK
/* The UDP Table is a unique lexical environment. These are most
     tokens that we can expect in a table. */
case 74:
YY_RULE_SETUP
#line 277 "lexor.lex"
{ return '_'; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "lexor.lex"
{ return '+'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "lexor.lex"
{ return '%'; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 280 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 281 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 282 "lexor.lex"
{ return 'Q'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 283 "lexor.lex"
{ return 'q'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 284 "lexor.lex"
{ return 'f'; /* b0 is 10|00, but only 10 is meaningful */}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 285 "lexor.lex"
{ return 'r'; /* b1 is 11|01, but only 01 is meaningful */}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 286 "lexor.lex"
{ return 'P'; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 287 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 288 "lexor.lex"
{ return 'M'; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 289 "lexor.lex"
{ return 'N'; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 290 "lexor.lex"
{ return 'F'; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 291 "lexor.lex"
{ return 'R'; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 292 "lexor.lex"
{ return 'B'; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 293 "lexor.lex"
{ return 'b'; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 294 "lexor.lex"
{ return 'l'; /* IVL extension */ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 295 "lexor.lex"
{ return 'h'; /* IVL extension */ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 296 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 297 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 298 "lexor.lex"
{ return 'x'; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 299 "lexor.lex"
{ return 'n'; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 300 "lexor.lex"
{ return 'p'; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 301 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 303 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 304 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 305 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 306 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 307 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 308 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 309 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 310 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 311 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 312 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 314 "lexor.lex"
{
      int rc = lexor_keyword_code(yytext, yyleng);
      switch (rc) {
	  case IDENTIFIER:
	    yylval.text = strdupnew(yytext);
	    if (strncmp(yylval.text,"PATHPULSE$", 10) == 0)
		  rc = PATHPULSE_IDENTIFIER;
	    break;

	  case K_edge:
	    BEGIN(EDGES);
	    break;

	  case K_module:
	  case K_macromodule:
	    in_module = true;
	    break;

	  case K_endmodule:
	    in_module = false;
	    break;

	  case K_primitive:
	    in_UDP = true;
	    break;

	  case K_endprimitive:
	    in_UDP = false;
	    break;

	  case K_table:
	    BEGIN(UDPTABLE);
	    break;

	  default:
	    yylval.text = 0;
	    break;
      }

	/* Special case: If this is part of a scoped name, then check
	   the package for identifier details. For example, if the
	   source file is  foo::bar, the parse.y will note the
	   PACKAGE_IDENTIFIER and "::" token and mark the
	   "in_package_scope" variable. Then this lexor will see the
	   identifier here and interpret it in the package scope. */
      if (in_package_scope) {
	    if (rc == IDENTIFIER) {
		  if (data_type_t*type = pform_test_type_identifier(in_package_scope, yylval.text)) {
			yylval.type_identifier.text = yylval.text;
			yylval.type_identifier.type = type;
			rc = TYPE_IDENTIFIER;
		  }
	    }
	    in_package_scope = 0;
	    return rc;
      }

	/* If this identifier names a discipline, then return this as
	   a DISCIPLINE_IDENTIFIER and return the discipline as the
	   value instead. */
      if (rc == IDENTIFIER && gn_verilog_ams_flag) {
	    perm_string tmp = lex_strings.make(yylval.text);
	    map<perm_string,ivl_discipline_t>::iterator cur = disciplines.find(tmp);
	    if (cur != disciplines.end()) {
		  delete[]yylval.text;
		  yylval.discipline = (*cur).second;
		  rc = DISCIPLINE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared package, then
	   return this as a PACKAGE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  rc = PACKAGE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared type, then
	   return this as a TYPE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (data_type_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  rc = TYPE_IDENTIFIER;
	    }
      }

      return rc;
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 408 "lexor.lex"
{
      yylval.text = strdupnew(yytext+1);
      if (gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  return PACKAGE_IDENTIFIER;
	    }
      }
      if (gn_system_verilog()) {
	    if (data_type_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  return TYPE_IDENTIFIER;
	    }
      }
      return IDENTIFIER;
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 427 "lexor.lex"
{
	/* The 1364-1995 timing checks. */
      if (strcmp(yytext,"$hold") == 0)
	    return K_Shold;
      if (strcmp(yytext,"$nochange") == 0)
	    return K_Snochange;
      if (strcmp(yytext,"$period") == 0)
	    return K_Speriod;
      if (strcmp(yytext,"$recovery") == 0)
	    return K_Srecovery;
      if (strcmp(yytext,"$setup") == 0)
	    return K_Ssetup;
      if (strcmp(yytext,"$setuphold") == 0)
	    return K_Ssetuphold;
      if (strcmp(yytext,"$skew") == 0)
	    return K_Sskew;
      if (strcmp(yytext,"$width") == 0)
	    return K_Swidth;
	/* The new 1364-2001 timing checks. */
      if (strcmp(yytext,"$fullskew") == 0)
	    return K_Sfullskew;
      if (strcmp(yytext,"$recrem") == 0)
	    return K_Srecrem;
      if (strcmp(yytext,"$removal") == 0)
	    return K_Sremoval;
      if (strcmp(yytext,"$timeskew") == 0)
	    return K_Stimeskew;

      if (strcmp(yytext,"$attribute") == 0)
	    return KK_attribute;

      if (gn_system_verilog() && strcmp(yytext,"$unit") == 0) {
	    yylval.package = pform_units.back();
	    return PACKAGE_IDENTIFIER;
      }

      yylval.text = strdupnew(yytext);
      return SYSTEM_IDENTIFIER; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 467 "lexor.lex"
{
      yylval.number = make_unsized_dec(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 471 "lexor.lex"
{
      yylval.number = make_undef_highz_dec(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 475 "lexor.lex"
{
      yylval.number = make_unsized_binary(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 479 "lexor.lex"
{
      yylval.number = make_unsized_octal(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 483 "lexor.lex"
{
      yylval.number = make_unsized_hex(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 487 "lexor.lex"
{
      if (!gn_system_verilog()) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": warning: "
		 << "Using SystemVerilog 'N bit vector.  Use at least "
		 << "-g2005-sv to remove this warning." << endl;
      }
      generation_t generation_save = generation_flag;
      generation_flag = GN_VER2005_SV;
      yylval.number = make_unsized_binary(yytext);
      generation_flag = generation_save;
      return UNBASED_NUMBER; }
	YY_BREAK
/* Decimal numbers are the usual. But watch out for the UDPTABLE
     mode, where there are no decimal numbers. Reject the match if we
     are in the UDPTABLE state. */
case 118:
YY_RULE_SETUP
#line 502 "lexor.lex"
{
      if (YY_START==UDPTABLE) {
	    REJECT;
      } else {
	    yylval.number = make_unsized_dec(yytext);
	    based_size = yylval.number->as_ulong();
	    return DEC_NUMBER;
      }
}
	YY_BREAK
/* This rule handles scaled time values for SystemVerilog. */
case 119:
YY_RULE_SETUP
#line 513 "lexor.lex"
{
      if (gn_system_verilog()) {
	    yylval.text = strdupnew(yytext);
	    return TIME_LITERAL;
      } else REJECT; }
	YY_BREAK
/* These rules handle the scaled real literals from Verilog-AMS. The
     value is a number with a single letter scale factor. If
     verilog-ams is not enabled, then reject this rule. If it is
     enabled, then collect the scale and use it to scale the value. */
case 120:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 523 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 528 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 533 "lexor.lex"
{
      size_t token_len = strlen(yytext);
      char*tmp = new char[token_len + 5];
      int scale = 0;
      strcpy(tmp, yytext);
      switch (tmp[token_len-1]) {
	  case 'a': scale = -18; break; /* atto- */
	  case 'f': scale = -15; break; /* femto- */
	  case 'p': scale = -12; break; /* pico- */
	  case 'n': scale = -9;  break; /* nano- */
	  case 'u': scale = -6;  break; /* micro- */
	  case 'm': scale = -3;  break; /* milli- */
	  case 'k': scale = 3;  break; /* kilo- */
	  case 'K': scale = 3;  break; /* kilo- */
	  case 'M': scale = 6;  break; /* mega- */
	  case 'G': scale = 9;  break; /* giga- */
	  case 'T': scale = 12; break; /* tera- */
	  default: assert(0); break;
      }
      snprintf(tmp+token_len-1, 5, "e%d", scale);
      yylval.realtime = new verireal(tmp);
      delete[]tmp;

      BEGIN(0);
      return REALTIME;  }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 559 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 563 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
/* Notice and handle the `timescale directive. */
case 125:
YY_RULE_SETUP
#line 570 "lexor.lex"
{ BEGIN(PPTIMESCALE); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 571 "lexor.lex"
{ process_timescale(yytext); }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 572 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`timescale directive can not be inside a module "
		    "definition." << endl;
	    error_count += 1;
      }
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
/* Notice and handle the `celldefine and `endcelldefine directives. */
case 128:
YY_RULE_SETUP
#line 584 "lexor.lex"
{ in_celldefine = true; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 585 "lexor.lex"
{ in_celldefine = false; }
	YY_BREAK
/* Notice and handle the resetall directive. */
case 130:
YY_RULE_SETUP
#line 589 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`resetall directive can not be inside a module "
		    "definition." << endl;
	    error_count += 1;
      } else if (in_UDP) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`resetall directive can not be inside a UDP "
		    "definition." << endl;
	    error_count += 1;
      } else {
	    reset_all();
      } }
	YY_BREAK
/* Notice and handle the `unconnected_drive directive. */
case 131:
YY_RULE_SETUP
#line 605 "lexor.lex"
{ BEGIN(PPUCDRIVE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 606 "lexor.lex"
{ process_ucdrive(yytext); }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 607 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`unconnected_drive directive can not be inside a "
		    "module definition." << endl;
	    error_count += 1;
      }
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 617 "lexor.lex"
{
      if (in_module) {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`nounconnected_drive directive can not be inside a "
		    "module definition." << endl;
	    error_count += 1;
      }
      uc_drive = UCD_NONE; }
	YY_BREAK
/* These are directives that I do not yet support. I think that IVL
     should handle these, not an external preprocessor. */
/* From 1364-2005 Chapter 19. */
case 135:
YY_RULE_SETUP
#line 629 "lexor.lex"
{  }
	YY_BREAK
/* From 1364-2005 Annex D. */
case 136:
YY_RULE_SETUP
#line 632 "lexor.lex"
{  }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 633 "lexor.lex"
{  }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 634 "lexor.lex"
{  }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 635 "lexor.lex"
{  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 636 "lexor.lex"
{  }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 637 "lexor.lex"
{  }
	YY_BREAK
/* From other places. */
case 142:
YY_RULE_SETUP
#line 640 "lexor.lex"
{  }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 641 "lexor.lex"
{  }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 642 "lexor.lex"
{  }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 643 "lexor.lex"
{  }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 644 "lexor.lex"
{  }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 645 "lexor.lex"
{  }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 646 "lexor.lex"
{  }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 648 "lexor.lex"
{ BEGIN(PPBEGIN_KEYWORDS); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 650 "lexor.lex"
{
      keyword_mask_stack.push_front(lexor_keyword_mask);

      char*word = yytext+1;
      char*tail = strchr(word, '"');
      tail[0] = 0;
      if (strcmp(word,"1364-1995") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995;
      } else if (strcmp(word,"1364-2001") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG;
      } else if (strcmp(word,"1364-2001-noconfig") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001;
      } else if (strcmp(word,"1364-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005;
      } else if (strcmp(word,"1800-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005;
      } else if (strcmp(word,"1800-2009") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009;
      } else if (strcmp(word,"1800-2012") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009
		                |GN_KEYWORDS_1800_2012;
      } else if (strcmp(word,"VAMS-2.3") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_VAMS_2_3;
      } else {
	    fprintf(stderr, "%s:%d: Ignoring unknown keywords string: %s\n",
		    yylloc.text, yylloc.first_line, word);
      }
      BEGIN(0);
 }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 704 "lexor.lex"
{
      fprintf(stderr, "%s:%d: Malformed keywords specification: %s\n",
	      yylloc.text, yylloc.first_line, yytext);
      BEGIN(0);
 }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 710 "lexor.lex"
{
      if (!keyword_mask_stack.empty()) {
	    lexor_keyword_mask = keyword_mask_stack.front();
	    keyword_mask_stack.pop_front();
      } else {
	    fprintf(stderr, "%s:%d: Mismatched end_keywords directive\n",
		    yylloc.text, yylloc.first_line);
      }
 }
	YY_BREAK
/* Notice and handle the default_nettype directive. The lexor
     detects the default_nettype keyword, and the second part of the
     rule collects the rest of the line and processes it. We only need
     to look for the first work, and interpret it. */
case 153:
YY_RULE_SETUP
#line 725 "lexor.lex"
{ BEGIN(PPDEFAULT_NETTYPE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 726 "lexor.lex"
{
      NetNet::Type net_type;
      size_t wordlen = strcspn(yytext, " \t\f\r\n");
      yytext[wordlen] = 0;
  /* Add support for other wire types and better error detection. */
      if (strcmp(yytext,"wire") == 0) {
	    net_type = NetNet::WIRE;

      } else if (strcmp(yytext,"tri") == 0) {
	    net_type = NetNet::TRI;

      } else if (strcmp(yytext,"tri0") == 0) {
	    net_type = NetNet::TRI0;

      } else if (strcmp(yytext,"tri1") == 0) {
	    net_type = NetNet::TRI1;

      } else if (strcmp(yytext,"wand") == 0) {
	    net_type = NetNet::WAND;

      } else if (strcmp(yytext,"triand") == 0) {
	    net_type = NetNet::TRIAND;

      } else if (strcmp(yytext,"wor") == 0) {
	    net_type = NetNet::WOR;

      } else if (strcmp(yytext,"trior") == 0) {
	    net_type = NetNet::TRIOR;

      } else if (strcmp(yytext,"none") == 0) {
	    net_type = NetNet::NONE;

      } else {
	    cerr << yylloc.text << ":" << yylloc.first_line
		 << ": error: Net type " << yytext
		 << " is not a valid (or supported)"
		 << " default net type." << endl;
	    net_type = NetNet::WIRE;
	    error_count += 1;
      }
      pform_set_default_nettype(net_type, yylloc.text, yylloc.first_line);
  }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 768 "lexor.lex"
{
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
/* These are directives that are not supported by me and should have
     been handled by an external preprocessor such as ivlpp. */
case 156:
YY_RULE_SETUP
#line 776 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `define not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 782 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `else not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 788 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `elsif not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 794 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `endif not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 800 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `ifdef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 806 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `ifndef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 812 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `include not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 818 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": warning: `undef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 825 "lexor.lex"
{ cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
	    << "Stray tic (`) here. Perhaps you put white space" << endl;
       cerr << yylloc.text << ":" << yylloc.first_line << ":      : "
	    << "between the tic and preprocessor directive?"
	    << endl;
       error_count += 1; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 832 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
/* Final catchall. something got lost or mishandled. */
/* XXX Should we tell the user something about the lexical state? */
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 837 "lexor.lex"
{   cerr << yylloc.text << ":" << yylloc.first_line
	   << ": error: unmatched character (";
      if (isprint(yytext[0]))
	    cerr << yytext[0];
      else
	    cerr << "hex " << hex << ((unsigned char) yytext[0]);

      cerr << ")" << endl;
      error_count += 1; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 847 "lexor.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3118 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CCOMMENT):
			case YY_STATE_EOF(PCOMMENT):
			case YY_STATE_EOF(LCOMMENT):
			case YY_STATE_EOF(CSTRING):
			case YY_STATE_EOF(UDPTABLE):
			case YY_STATE_EOF(PPTIMESCALE):
			case YY_STATE_EOF(PPUCDRIVE):
			case YY_STATE_EOF(PPDEFAULT_NETTYPE):
			case YY_STATE_EOF(PPBEGIN_KEYWORDS):
			case YY_STATE_EOF(EDGES):
			case YY_STATE_EOF(REAL_SCALE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 698 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 698 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 697);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 847 "lexor.lex"


/*
 * The UDP state table needs some slightly different treatment by the
 * lexor. The level characters are normally accepted as other things,
 * so the parser needs to switch my mode when it believes in needs to.
 */
void lex_end_table()
{
      BEGIN(INITIAL);
}

static unsigned truncate_to_integer_width(verinum::V*bits, unsigned size)
{
      if (size <= integer_width) return size;

      verinum::V pad = bits[size-1];
      if (pad == verinum::V1) pad = verinum::V0;

      for (unsigned idx = integer_width; idx < size; idx += 1) {
	    if (bits[idx] != pad) {
		  yywarn(yylloc, "Unsized numeric constant truncated to integer width.");
		  break;
	    }
      }
      return integer_width;
}

verinum*make_unsized_binary(const char*txt)
{
      bool sign_flag = false;
      bool single_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert((tolower(*ptr) == 'b') || gn_system_verilog());
      if (tolower(*ptr) == 'b') {
	    ptr += 1;
      } else {
	    assert(sign_flag == false);
	    single_flag = true;
      }

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 1;

      if (size == 0) {
	    VLerror(yylloc, "Numeric literal has no digits in it.");
	    verinum*out = new verinum();
	    out->has_sign(sign_flag);
	    out->is_single(single_flag);
	    return out;
      }

      if ((based_size > 0) && (size > based_size)) yywarn(yylloc,
          "extra digits given for sized binary constant.");

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    switch (ptr[0]) {
		case '0':
		  bits[--idx] = verinum::V0;
		  break;
		case '1':
		  bits[--idx] = verinum::V1;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  break;
		  case '_':
		  break;
		default:
		  fprintf(stderr, "%c\n", ptr[0]);
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      out->is_single(single_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_octal(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert(tolower(*ptr) == 'o');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 3;

      if (based_size > 0) {
            int rem = based_size % 3;
	    if (rem != 0) based_size += 3 - rem;
	    if (size > based_size) yywarn(yylloc,
	        "extra digits given for sized octal constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3':
		case '4': case '5': case '6': case '7':
		  val = *ptr - '0';
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_hex(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }
      assert(tolower(*ptr) == 'h');

      ptr += 1;
      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 4;

      if (based_size > 0) {
            int rem = based_size % 4;
	    if (rem != 0) based_size += 4 - rem;
	    if (size > based_size) yywarn(yylloc,
	        "extra digits given for sized hex constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		  val = *ptr - '0';
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
		  val = tolower(*ptr) - 'a' + 10;
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


/* Divide the integer given by the string by 2. Return the remainder bit. */
static int dec_buf_div2(char *buf)
{
    int partial;
    int len = strlen(buf);
    char *dst_ptr;
    int pos;

    partial = 0;
    pos = 0;

    /* dst_ptr overwrites buf, but all characters that are overwritten
       were already used by the reader. */
    dst_ptr = buf;

    while(buf[pos] == '0')
	++pos;

    for(; pos<len; ++pos){
	if (buf[pos]=='_')
	    continue;

	assert(isdigit(buf[pos]));

	partial= partial*10 + (buf[pos]-'0');

	if (partial >= 2){
	    *dst_ptr = partial/2 + '0';
	    partial = partial & 1;

	    ++dst_ptr;
	}
	else{
	    *dst_ptr = '0';
	    ++dst_ptr;
	}
    }

    // If result of division was zero string, it should remain that way.
    // Don't eat the last zero...
    if (dst_ptr == buf){
	*dst_ptr = '0';
	++dst_ptr;
    }
    *dst_ptr = 0;

    return partial;
}

/* Support a single x, z or ? as a decimal constant (from 1364-2005). */
verinum* make_undef_highz_dec(const char* ptr)
{
      bool signed_flag = false;

      assert(*ptr == '\'');
      /* The number may have decorations of the form 'sd<code>,
         possibly with space between the d and the <code>.
         Also, the 's' is optional, and marks the number as signed. */
      ptr += 1;

      if (tolower(*ptr) == 's') {
	  signed_flag = true;
	  ptr += 1;
      }

      assert(tolower(*ptr) == 'd');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	  ptr += 1;

	/* Process the code. */
      verinum::V* bits = new verinum::V[1];
      switch (*ptr) {
	  case 'x':
	  case 'X':
	    bits[0] = verinum::Vx;
	    break;
	  case 'z':
	  case 'Z':
	  case '?':
	    bits[0] = verinum::Vz;
	    break;
	  default:
	    assert(0);
      }
      ptr += 1;
      while (*ptr == '_') ptr += 1;
      assert(*ptr == 0);

      verinum*out = new verinum(bits, 1, false);
      out->has_sign(signed_flag);
      delete[]bits;
      return out;
}

/*
 * Making a decimal number is much easier than the other base numbers
 * because there are no z or x values to worry about. It is much
 * harder than other base numbers because the width needed in bits is
 * hard to calculate.
 */

verinum*make_unsized_dec(const char*ptr)
{
      char buf[4096];
      bool signed_flag = false;
      unsigned idx;

      if (ptr[0] == '\'') {
	      /* The number has decorations of the form 'sd<digits>,
		 possibly with space between the d and the <digits>.
		 Also, the 's' is optional, and marks the number as
		 signed. */
	    ptr += 1;

	    if (tolower(*ptr) == 's') {
		  signed_flag = true;
		  ptr += 1;
	    }

	    assert(tolower(*ptr) == 'd');
	    ptr += 1;

	    while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
		  ptr += 1;

      } else {
	      /* ... or an undecorated decimal number is passed
		 it. These numbers are treated as signed decimal. */
	    assert(isdigit(*ptr));
	    signed_flag = true;
      }


	/* Copy the digits into a buffer that I can use to do in-place
	   decimal divides. */
      idx = 0;
      while ((idx < sizeof buf) && (*ptr != 0)) {
	    if (*ptr == '_') {
		  ptr += 1;
		  continue;
	    }

	    buf[idx++] = *ptr++;
      }

      if (idx == sizeof buf) {
	    fprintf(stderr, "Ridiculously long"
		    " decimal constant will be truncated!\n");
	    idx -= 1;
      }

      buf[idx] = 0;
      unsigned tmp_size = idx * 4 + 1;
      verinum::V *bits = new verinum::V[tmp_size];

      idx = 0;
      while (idx < tmp_size) {
	    int rem = dec_buf_div2(buf);
	    bits[idx++] = (rem == 1) ? verinum::V1 : verinum::V0;
      }

      assert(strcmp(buf, "0") == 0);

	/* Now calculate the minimum number of bits needed to
	   represent this unsigned number. */
      unsigned size = tmp_size;
      while ((size > 1) && (bits[size-1] == verinum::V0))
	    size -= 1;

	/* Now account for the signedness. Don't leave a 1 in the high
	   bit if this is a signed number. */
      if (signed_flag && (bits[size-1] == verinum::V1)) {
	    size += 1;
	    assert(size <= tmp_size);
      }

        /* Since we never have the real number of bits that a decimal
           number represents we do not check for extra bits. */
//      if (based_size > 0) { }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*res = new verinum(bits, size, false);
      res->has_sign(signed_flag);

      delete[]bits;
      return res;
}

/*
 * Convert the string to a time unit or precision.
 * Returns true on failure.
 */
static bool get_timescale_const(const char *&cp, int &res, bool is_unit)
{
	/* Check for the 1 digit. */
      if (*cp != '1') {
	    if (is_unit) {
		  VLerror(yylloc, "Invalid `timescale unit constant "
		                  "(1st digit)");
	    } else {
		  VLerror(yylloc, "Invalid `timescale precision constant "
		                  "(1st digit)");
	    }
	    return true;
      }
      cp += 1;

	/* Check the number of zeros after the 1. */
      res = strspn(cp, "0");
      if (res > 2) {
	    if (is_unit) {
		  VLerror(yylloc, "Invalid `timescale unit constant "
		                  "(number of zeros)");
	    } else {
		  VLerror(yylloc, "Invalid `timescale precision constant "
		                  "(number of zeros)");
	    }
	    return true;
      }
      cp += res;

	/* Skip any space between the digits and the scaling string. */
      cp += strspn(cp, " \t");

	/* Now process the scaling string. */
      if (strncmp("s", cp, 1) == 0) {
	    res -= 0;
	    cp += 1;
	    return false;

      } else if (strncmp("ms", cp, 2) == 0) {
	    res -= 3;
	    cp += 2;
	    return false;

      } else if (strncmp("us", cp, 2) == 0) {
	    res -= 6;
	    cp += 2;
	    return false;

      } else if (strncmp("ns", cp, 2) == 0) {
	    res -= 9;
	    cp += 2;
	    return false;

      } else if (strncmp("ps", cp, 2) == 0) {
	    res -= 12;
	    cp += 2;
	    return false;

      } else if (strncmp("fs", cp, 2) == 0) {
	    res -= 15;
	    cp += 2;
	    return false;

      }

      if (is_unit) {
	    VLerror(yylloc, "Invalid `timescale unit scale");
      } else {
	    VLerror(yylloc, "Invalid `timescale precision scale");
      }
      return true;
}


/*
 * process either a pull0 or a pull1.
 */
static void process_ucdrive(const char*txt)
{
      UCDriveType ucd = UCD_NONE;
      const char*cp = txt + strspn(txt, " \t");

	/* Skip the space after the `unconnected_drive directive. */
      if (cp == txt) {
	    VLerror(yylloc, "Space required after `unconnected_drive "
	                    "directive.");
	    return;
      }

	/* Check for the pull keyword. */
      if (strncmp("pull", cp, 4) != 0) {
	    VLerror(yylloc, "pull required for `unconnected_drive "
	                    "directive.");
	    return;
      }
      cp += 4;
      if (*cp == '0') ucd = UCD_PULL0;
      else if (*cp == '1') ucd = UCD_PULL1;
      else {
	    cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
		    "`unconnected_drive does not support 'pull" << *cp
	         << "'." << endl;
	    error_count += 1;
	    return;
      }
      cp += 1;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "Invalid `unconnected_drive directive (extra "
	                    "garbage after precision).");
	    return;
      }

      uc_drive = ucd;
}

/*
 * The timescale parameter has the form:
 *      " <num> xs / <num> xs"
 */
static void process_timescale(const char*txt)
{
      const char*cp = txt + strspn(txt, " \t");

	/* Skip the space after the `timescale directive. */
      if (cp == txt) {
	    VLerror(yylloc, "Space required after `timescale directive.");
	    return;
      }

      int unit = 0;
      int prec = 0;

	/* Get the time units. */
      if (get_timescale_const(cp, unit, true)) return;

	/* Skip any space after the time units, the '/' and any
	 * space after the '/'. */
      cp += strspn(cp, " \t");
      if (*cp != '/') {
	    VLerror(yylloc, "`timescale separator '/' appears to be missing.");
	    return;
      }
      cp += 1;
      cp += strspn(cp, " \t");

	/* Get the time precision. */
      if (get_timescale_const(cp, prec, false)) return;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "Invalid `timescale directive (extra garbage "
	                    "after precision).");
	    return;
      }

	/* The time unit must be greater than or equal to the precision. */
      if (unit < prec) {
	    VLerror(yylloc, "error: `timescale unit must not be less than "
	                    "the precision.");
	    return;
      }

      pform_set_timescale(unit, prec, yylloc.text, yylloc.first_line);
}

int yywrap()
{
      return 1;
}

/*
 * The line directive matches lines of the form #line "foo" N and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite.
 */
static void line_directive()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(yytext, '#');
	/* Skip the #line directive. */
      assert(strncmp(cp, "#line", 5) == 0);
      cp += 5;
	/* Skip the space after the #line directive. */
      cp += strspn(cp, " \t");

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "Invalid #line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "Invalid #line directive (file name end).");
	    return;
      }

	/* Copy the file name and assign it to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

	/* Skip the space after the file name. */
      cp = fn_end;
      cp += 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid #line directive (missing space after "
	                    "file name).");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Get the line number and verify that it is correct. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid line number for #line directive.");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Verify that only space is left. */
      cpr += strspn(cp, " \t");
      if ((size_t)(cpr-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "Invalid #line directive (extra garbage after "
	                    "line number).");
	    delete[] buf;
	    return;
      }

	/* Now we can assign the new values to yyloc. */
      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * The line directive matches lines of the form `line N "foo" M and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite. M is ignored.
 */
static void line_directive2()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(yytext, '`');
	/* Skip the `line directive. */
      assert(strncmp(cp, "`line", 5) == 0);
      cp += 5;

	/* strtoul skips leading space. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid line number for `line directive.");
	    return;
      }
      lineno -= 1;
      cp = cpr;

	/* Skip the space between the line number and the file name. */
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid `line directive (missing space after "
	                    "line number).");
	    return;
      }
      cp = cpr;

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "Invalid `line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "Invalid `line directive (file name end).");
	    return;
      }

	/* Skip the space after the file name. */
      cp = fn_end + 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "Invalid `line directive (missing space after "
	                    "file name).");
	    return;
      }
      cp = cpr;

	/* Check that the level is correct, we do not need the level. */
      if (strspn(cp, "012") != 1) {
	    VLerror(yylloc, "Invalid level for `line directive.");
	    return;
      }
      cp += 1;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "Invalid `line directive (extra garbage after "
	                    "level).");
	    return;
      }

	/* Copy the file name and assign it and the line number to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * Reset all compiler directives. This will be called when a `resetall
 * directive is encountered or when a new compilation unit is started.
 */
static void reset_all()
{
      pform_set_default_nettype(NetNet::WIRE, yylloc.text, yylloc.first_line);
      in_celldefine = false;
      uc_drive = UCD_NONE;
      pform_set_timescale(def_ts_units, def_ts_prec, 0, 0);
}

extern FILE*vl_input;
void reset_lexor()
{
      yyrestart(vl_input);
      yylloc.first_line = 1;

	/* Announce the first file name. */
      yylloc.text = set_file_name(strdupnew(vl_file.c_str()));

      if (separate_compilation) {
	    reset_all();
	    if (!keyword_mask_stack.empty()) {
		  lexor_keyword_mask = keyword_mask_stack.back();
		  keyword_mask_stack.clear();
	    }
      }
}

/*
 * Modern version of flex (>=2.5.9) can clean up the scanner data.
 */
void destroy_lexor()
{
# ifdef FLEX_SCANNER
#   if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5
#     if YY_FLEX_MINOR_VERSION > 5 || defined(YY_FLEX_SUBMINOR_VERSION) && YY_FLEX_SUBMINOR_VERSION >= 9
    yylex_destroy();
#     endif
#   endif
# endif
}

