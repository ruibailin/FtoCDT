/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_MISC_GENERATED_TRACERS_H
#define TRACE_HW_MISC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ECC_MEM_WRITEL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_POWER_FAIL_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_READB_EVENT;
extern TraceEvent _TRACE_APC_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_APC_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_WRITEW_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_READW_EVENT;
extern TraceEvent _TRACE_MILKYMIST_HPDMC_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_PFPU_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_PFPU_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_PFPU_VECTOUT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_PFPU_PULSE_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_SCU_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_READ_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_RESET_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_LEDS_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_RESET_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_LEDS_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_READ_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_COUNTER_EVENT;
extern TraceEvent _TRACE_MOS6522_GET_NEXT_IRQ_TIME_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_SR_INT_EVENT;
extern TraceEvent _TRACE_MOS6522_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_TRANSLATE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_IOMMU_NOTIFY_EVENT;
extern TraceEvent _TRACE_TZ_MSC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_MSC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_MSC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_MSC_ACCESS_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_AP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_ENABLE_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_PPC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_PPC_READ_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_WRITE_BLOCKED_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_WRITE_EVENT;
extern TraceEvent _TRACE_CCM_ENTRY_EVENT;
extern TraceEvent _TRACE_CCM_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_CLOCK_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_READ_REG_EVENT;
extern TraceEvent _TRACE_CCM_WRITE_REG_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_RESET_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_WRITE_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_XDMA_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_IRQ_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_PROPERTY_EVENT;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_POWER_FAIL_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_READB_DSTATE;
extern uint16_t _TRACE_APC_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_APC_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_WRITEW_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_READW_DSTATE;
extern uint16_t _TRACE_MILKYMIST_HPDMC_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_PFPU_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_PFPU_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_PFPU_VECTOUT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_PFPU_PULSE_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_SCU_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_READ_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_RESET_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_LEDS_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_RESET_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_LEDS_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_READ_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_COUNTER_DSTATE;
extern uint16_t _TRACE_MOS6522_GET_NEXT_IRQ_TIME_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_SR_INT_DSTATE;
extern uint16_t _TRACE_MOS6522_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_TRANSLATE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_IOMMU_NOTIFY_DSTATE;
extern uint16_t _TRACE_TZ_MSC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_MSC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_MSC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_MSC_ACCESS_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_AP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_ENABLE_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_PPC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_PPC_READ_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_WRITE_BLOCKED_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_WRITE_DSTATE;
extern uint16_t _TRACE_CCM_ENTRY_DSTATE;
extern uint16_t _TRACE_CCM_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_CLOCK_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_READ_REG_DSTATE;
extern uint16_t _TRACE_CCM_WRITE_REG_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_RESET_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_WRITE_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_XDMA_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_IRQ_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_PROPERTY_DSTATE;
#define TRACE_ECC_MEM_WRITEL_MER_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MDR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_VCR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_DR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR1_ENABLED 1
#define TRACE_ECC_MEM_READL_MER_ENABLED 1
#define TRACE_ECC_MEM_READL_MDR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_READL_VCR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR0_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR1_ENABLED 1
#define TRACE_ECC_MEM_READL_DR_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR1_ENABLED 1
#define TRACE_ECC_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_ECC_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_ENABLED 1
#define TRACE_SLAVIO_SET_POWER_FAIL_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_READB_ENABLED 1
#define TRACE_APC_MEM_WRITEB_ENABLED 1
#define TRACE_APC_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_READW_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_PFPU_VECTOUT_ENABLED 1
#define TRACE_MILKYMIST_PFPU_PULSE_IRQ_ENABLED 1
#define TRACE_ASPEED_SCU_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_READ_ENABLED 1
#define TRACE_MPS2_SCC_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_RESET_ENABLED 1
#define TRACE_MPS2_SCC_LEDS_ENABLED 1
#define TRACE_MPS2_SCC_CFG_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_CFG_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_WRITE_ENABLED 1
#define TRACE_MPS2_FPGAIO_RESET_ENABLED 1
#define TRACE_MPS2_FPGAIO_LEDS_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_ENABLED 1
#define TRACE_MSF2_SYSREG_READ_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_ENABLED 1
#define TRACE_IMX7_GPR_READ_ENABLED 1
#define TRACE_IMX7_GPR_WRITE_ENABLED 1
#define TRACE_MOS6522_SET_COUNTER_ENABLED 1
#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_ENABLED 1
#define TRACE_MOS6522_SET_SR_INT_ENABLED 1
#define TRACE_MOS6522_WRITE_ENABLED 1
#define TRACE_MOS6522_READ_ENABLED 1
#define TRACE_TZ_MPC_REG_READ_ENABLED 1
#define TRACE_TZ_MPC_REG_WRITE_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_READ_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_ENABLED 1
#define TRACE_TZ_MPC_TRANSLATE_ENABLED 1
#define TRACE_TZ_MPC_IOMMU_NOTIFY_ENABLED 1
#define TRACE_TZ_MSC_RESET_ENABLED 1
#define TRACE_TZ_MSC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_MSC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_MSC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_MSC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_MSC_ACCESS_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_RESET_ENABLED 1
#define TRACE_TZ_PPC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_PPC_CFG_AP_ENABLED 1
#define TRACE_TZ_PPC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_PPC_IRQ_ENABLE_ENABLED 1
#define TRACE_TZ_PPC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_PPC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_PPC_READ_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_WRITE_BLOCKED_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_WRITE_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_WRITE_ENABLED 1
#define TRACE_CCM_ENTRY_ENABLED 1
#define TRACE_CCM_FREQ_ENABLED 1
#define TRACE_CCM_CLOCK_FREQ_ENABLED 1
#define TRACE_CCM_READ_REG_ENABLED 1
#define TRACE_CCM_WRITE_REG_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_READ_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_READ_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_RESET_ENABLED 1
#define TRACE_ARMSSE_CPUID_READ_ENABLED 1
#define TRACE_ARMSSE_CPUID_WRITE_ENABLED 1
#define TRACE_ARMSSE_MHU_READ_ENABLED 1
#define TRACE_ARMSSE_MHU_WRITE_ENABLED 1
#define TRACE_ASPEED_XDMA_WRITE_ENABLED 1
#define TRACE_BCM2835_MBOX_WRITE_ENABLED 1
#define TRACE_BCM2835_MBOX_READ_ENABLED 1
#define TRACE_BCM2835_MBOX_IRQ_ENABLED 1
#define TRACE_BCM2835_MBOX_PROPERTY_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_ECC_MEM_WRITEL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mer(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_mer " "Write memory enable 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mer(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_mdr " "Write memory delay 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mdr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_mfsr " "Write memory fault status 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mfsr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_vcr " "Write slot configuration 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_vcr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_dr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_dr " "Write diagnostic 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_dr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr0 " "Write event count 1 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr0(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr1 " "Write event count 2 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr1(val);
    }
}

#define TRACE_ECC_MEM_READL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_mer " "Read memory enable 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mer(ret);
    }
}

#define TRACE_ECC_MEM_READL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_mdr " "Read memory delay 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mdr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfsr " "Read memory fault status 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfsr(ret);
    }
}

#define TRACE_ECC_MEM_READL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_vcr " "Read slot configuration 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_vcr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar0 " "Read memory fault address 0 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar0(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar1 " "Read memory fault address 1 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar1(ret);
    }
}

#define TRACE_ECC_MEM_READL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_dr " "Read diagnostic 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_dr(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr0 " "Read event count 1 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr0(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr1 " "Read event count 2 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr1(ret);
    }
}

#define TRACE_ECC_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_diag_mem_writeb " "Write diagnostic %"PRId64" = 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_writeb(addr, val);
    }
}

#define TRACE_ECC_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ecc_diag_mem_readb " "Read diagnostic %"PRId64"= 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, ret);
    }
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_readb(addr, ret);
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_raise(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_raise " "Raise IRQ" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_raise();
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_lower(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_lower " "Lower IRQ" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_lower();
    }
}

#define TRACE_SLAVIO_SET_POWER_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_POWER_FAIL) || \
    false)

static inline void _nocheck__trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_POWER_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_set_power_fail " "Power fail: %d, config: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , power_failing, config);
    }
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (true) {
        _nocheck__trace_slavio_set_power_fail(power_failing, config);
    }
}

#define TRACE_SLAVIO_CFG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_cfg_mem_writeb " "Write config 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_CFG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_cfg_mem_readb " "Read config 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_diag_mem_writeb " "Write diag 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_diag_mem_readb " "Read diag 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_MDM_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_mdm_mem_writeb " "Write modem control 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_MDM_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_mdm_mem_readb " "Read modem control 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_aux1_mem_writeb " "Write aux1 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_aux1_mem_readb " "Read aux1 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_aux2_mem_writeb " "Write aux2 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_aux2_mem_readb " "Read aux2 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_readb(ret);
    }
}

#define TRACE_APC_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_apc_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_APC_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apc_mem_writeb " "Write power management 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_apc_mem_writeb(val);
    }
}

#define TRACE_APC_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_READB) || \
    false)

static inline void _nocheck__trace_apc_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_APC_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apc_mem_readb " "Read power management 0x%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_apc_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_writel " "Write system control 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_writel(val);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_readl " "Read system control 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_readl(ret);
    }
}

#define TRACE_SLAVIO_LED_MEM_WRITEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_WRITEW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_writew(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_WRITEW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_led_mem_writew " "Write diagnostic LED 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_writew(val);
    }
}

#define TRACE_SLAVIO_LED_MEM_READW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_READW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_readw(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_READW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_led_mem_readw " "Read diagnostic LED 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ret);
    }
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_readw(ret);
    }
}

#define TRACE_MILKYMIST_HPDMC_MEMORY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_HPDMC_MEMORY_READ) || \
    false)

static inline void _nocheck__trace_milkymist_hpdmc_memory_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_HPDMC_MEMORY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_hpdmc_memory_read " "addr=0x%08x value=0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_hpdmc_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_hpdmc_memory_read(addr, value);
    }
}

#define TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_HPDMC_MEMORY_WRITE) || \
    false)

static inline void _nocheck__trace_milkymist_hpdmc_memory_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_HPDMC_MEMORY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_hpdmc_memory_write " "addr=0x%08x value=0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_hpdmc_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_hpdmc_memory_write(addr, value);
    }
}

#define TRACE_MILKYMIST_PFPU_MEMORY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_PFPU_MEMORY_READ) || \
    false)

static inline void _nocheck__trace_milkymist_pfpu_memory_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_PFPU_MEMORY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_pfpu_memory_read " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_pfpu_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_pfpu_memory_read(addr, value);
    }
}

#define TRACE_MILKYMIST_PFPU_MEMORY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_PFPU_MEMORY_WRITE) || \
    false)

static inline void _nocheck__trace_milkymist_pfpu_memory_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_PFPU_MEMORY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_pfpu_memory_write " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_pfpu_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_pfpu_memory_write(addr, value);
    }
}

#define TRACE_MILKYMIST_PFPU_VECTOUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_PFPU_VECTOUT) || \
    false)

static inline void _nocheck__trace_milkymist_pfpu_vectout(uint32_t a, uint32_t b, uint32_t dma_ptr)
{
    if (trace_event_get_state(TRACE_MILKYMIST_PFPU_VECTOUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_pfpu_vectout " "a 0x%08x b 0x%08x dma_ptr 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , a, b, dma_ptr);
    }
}

static inline void trace_milkymist_pfpu_vectout(uint32_t a, uint32_t b, uint32_t dma_ptr)
{
    if (true) {
        _nocheck__trace_milkymist_pfpu_vectout(a, b, dma_ptr);
    }
}

#define TRACE_MILKYMIST_PFPU_PULSE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_PFPU_PULSE_IRQ) || \
    false)

static inline void _nocheck__trace_milkymist_pfpu_pulse_irq(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_PFPU_PULSE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_pfpu_pulse_irq " "Pulse IRQ" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_pfpu_pulse_irq(void)
{
    if (true) {
        _nocheck__trace_milkymist_pfpu_pulse_irq();
    }
}

#define TRACE_ASPEED_SCU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SCU_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SCU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_scu_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, size, data);
    }
}

static inline void trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_scu_write(offset, size, data);
    }
}

#define TRACE_MPS2_SCC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_read " "MPS2 SCC read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_read(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_write " "MPS2 SCC write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_write(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_RESET) || \
    false)

static inline void _nocheck__trace_mps2_scc_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_reset " "MPS2 SCC: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_mps2_scc_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_scc_reset();
    }
}

#define TRACE_MPS2_SCC_LEDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_LEDS) || \
    false)

static inline void _nocheck__trace_mps2_scc_leds(char led7, char led6, char led5, char led4, char led3, char led2, char led1, char led0)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_LEDS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_leds " "MPS2 SCC LEDs: %c%c%c%c%c%c%c%c" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , led7, led6, led5, led4, led3, led2, led1, led0);
    }
}

static inline void trace_mps2_scc_leds(char led7, char led6, char led5, char led4, char led3, char led2, char led1, char led0)
{
    if (true) {
        _nocheck__trace_mps2_scc_leds(led7, led6, led5, led4, led3, led2, led1, led0);
    }
}

#define TRACE_MPS2_SCC_CFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_cfg_write " "MPS2 SCC config write: function %d device %d data 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , function, device, value);
    }
}

static inline void trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_write(function, device, value);
    }
}

#define TRACE_MPS2_SCC_CFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_scc_cfg_read " "MPS2 SCC config read: function %d device %d data 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , function, device, value);
    }
}

static inline void trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_read(function, device, value);
    }
}

#define TRACE_MPS2_FPGAIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_READ) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_fpgaio_read " "MPS2 FPGAIO read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_read(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_fpgaio_write " "MPS2 FPGAIO write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_write(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_RESET) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_fpgaio_reset " "MPS2 FPGAIO: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_mps2_fpgaio_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_reset();
    }
}

#define TRACE_MPS2_FPGAIO_LEDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_LEDS) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_leds(char led1, char led0)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_LEDS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mps2_fpgaio_leds " "MPS2 FPGAIO LEDs: %c%c" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , led1, led0);
    }
}

static inline void trace_mps2_fpgaio_leds(char led1, char led0)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_leds(led1, led0);
    }
}

#define TRACE_MSF2_SYSREG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:msf2_sysreg_write " "msf2-sysreg write: addr 0x%08" PRIx64 " data 0x%" PRIx32 " prev 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, val, prev);
    }
}

static inline void trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write(offset, val, prev);
    }
}

#define TRACE_MSF2_SYSREG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_READ) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:msf2_sysreg_read " "msf2-sysreg read: addr 0x%08" PRIx64 " data 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, val);
    }
}

static inline void trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_read(offset, val);
    }
}

#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write_pll_status(void)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:msf2_sysreg_write_pll_status " "Invalid write to read only PLL status register" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_msf2_sysreg_write_pll_status(void)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write_pll_status();
    }
}

#define TRACE_IMX7_GPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_READ) || \
    false)

static inline void _nocheck__trace_imx7_gpr_read(uint64_t offset)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:imx7_gpr_read " "addr 0x%08" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset);
    }
}

static inline void trace_imx7_gpr_read(uint64_t offset)
{
    if (true) {
        _nocheck__trace_imx7_gpr_read(offset);
    }
}

#define TRACE_IMX7_GPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_WRITE) || \
    false)

static inline void _nocheck__trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:imx7_gpr_write " "addr 0x%08" PRIx64 "value 0x%08" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, value);
    }
}

static inline void trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_imx7_gpr_write(offset, value);
    }
}

#define TRACE_MOS6522_SET_COUNTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_COUNTER) || \
    false)

static inline void _nocheck__trace_mos6522_set_counter(int index, unsigned int val)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_COUNTER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mos6522_set_counter " "T%d.counter=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , index, val);
    }
}

static inline void trace_mos6522_set_counter(int index, unsigned int val)
{
    if (true) {
        _nocheck__trace_mos6522_set_counter(index, val);
    }
}

#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_GET_NEXT_IRQ_TIME) || \
    false)

static inline void _nocheck__trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (trace_event_get_state(TRACE_MOS6522_GET_NEXT_IRQ_TIME) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mos6522_get_next_irq_time " "latch=%d counter=0x%"PRId64 " delta_next=0x%"PRId64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , latch, d, delta);
    }
}

static inline void trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (true) {
        _nocheck__trace_mos6522_get_next_irq_time(latch, d, delta);
    }
}

#define TRACE_MOS6522_SET_SR_INT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_SR_INT) || \
    false)

static inline void _nocheck__trace_mos6522_set_sr_int(void)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_SR_INT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mos6522_set_sr_int " "set sr_int" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_mos6522_set_sr_int(void)
{
    if (true) {
        _nocheck__trace_mos6522_set_sr_int();
    }
}

#define TRACE_MOS6522_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_WRITE) || \
    false)

static inline void _nocheck__trace_mos6522_write(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_MOS6522_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mos6522_write " "reg=0x%"PRIx64 " val=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_mos6522_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_mos6522_write(addr, val);
    }
}

#define TRACE_MOS6522_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_READ) || \
    false)

static inline void _nocheck__trace_mos6522_read(uint64_t addr, unsigned val)
{
    if (trace_event_get_state(TRACE_MOS6522_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:mos6522_read " "reg=0x%"PRIx64 " val=0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_mos6522_read(uint64_t addr, unsigned val)
{
    if (true) {
        _nocheck__trace_mos6522_read(addr, val);
    }
}

#define TRACE_TZ_MPC_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_reg_read " "TZ MPC regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_read(offset, data, size);
    }
}

#define TRACE_TZ_MPC_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_reg_write " "TZ MPC regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_write(offset, data, size);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_read " "TZ MPC blocked read: offset 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, secure);
    }
}

static inline void trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_read(addr, size, secure);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_write " "TZ MPC blocked write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, data, size, secure);
    }
}

static inline void trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_write(addr, data, size, secure);
    }
}

#define TRACE_TZ_MPC_TRANSLATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_TRANSLATE) || \
    false)

static inline void _nocheck__trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (trace_event_get_state(TRACE_TZ_MPC_TRANSLATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_translate " "TZ MPC translate: addr 0x%" PRIx64 " flags 0x%x iommu_idx %s: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, flags, idx, res);
    }
}

static inline void trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (true) {
        _nocheck__trace_tz_mpc_translate(addr, flags, idx, res);
    }
}

#define TRACE_TZ_MPC_IOMMU_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_IOMMU_NOTIFY) || \
    false)

static inline void _nocheck__trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (trace_event_get_state(TRACE_TZ_MPC_IOMMU_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_mpc_iommu_notify " "TZ MPC iommu: notifying UNMAP/MAP for 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr);
    }
}

static inline void trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (true) {
        _nocheck__trace_tz_mpc_iommu_notify(addr);
    }
}

#define TRACE_TZ_MSC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_RESET) || \
    false)

static inline void _nocheck__trace_tz_msc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_MSC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_reset " "TZ MSC: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tz_msc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_msc_reset();
    }
}

#define TRACE_TZ_MSC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_nonsec(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_cfg_nonsec " "TZ MSC: cfg_nonsec = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_msc_cfg_nonsec(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_nonsec(level);
    }
}

#define TRACE_TZ_MSC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_cfg_sec_resp " "TZ MSC: cfg_sec_resp = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_msc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_MSC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_msc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_irq_clear " "TZ MSC: int_clear = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_msc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_irq_clear(level);
    }
}

#define TRACE_TZ_MSC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_msc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_update_irq " "TZ MSC: setting irq line to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_msc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_update_irq(level);
    }
}

#define TRACE_TZ_MSC_ACCESS_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_ACCESS_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_msc_access_blocked(uint64_t offset)
{
    if (trace_event_get_state(TRACE_TZ_MSC_ACCESS_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_msc_access_blocked " "TZ MSC: offset 0x%" PRIx64 " access blocked" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset);
    }
}

static inline void trace_tz_msc_access_blocked(uint64_t offset)
{
    if (true) {
        _nocheck__trace_tz_msc_access_blocked(offset);
    }
}

#define TRACE_TZ_PPC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_RESET) || \
    false)

static inline void _nocheck__trace_tz_ppc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_PPC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_reset " "TZ PPC: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tz_ppc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_ppc_reset();
    }
}

#define TRACE_TZ_PPC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_cfg_nonsec " "TZ PPC: cfg_nonsec[%d] = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n, level);
    }
}

static inline void trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_nonsec(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_AP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_AP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_ap(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_AP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_cfg_ap " "TZ PPC: cfg_ap[%d] = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n, level);
    }
}

static inline void trace_tz_ppc_cfg_ap(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_ap(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_cfg_sec_resp " "TZ PPC: cfg_sec_resp = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_ppc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_PPC_IRQ_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_ENABLE) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_enable(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_irq_enable " "TZ PPC: int_enable = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_ppc_irq_enable(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_enable(level);
    }
}

#define TRACE_TZ_PPC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_irq_clear " "TZ PPC: int_clear = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_ppc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_clear(level);
    }
}

#define TRACE_TZ_PPC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_ppc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_update_irq " "TZ PPC: setting irq line to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_tz_ppc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_update_irq(level);
    }
}

#define TRACE_TZ_PPC_READ_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_READ_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_READ_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_read_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " read (secure %d user %d) blocked" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n, offset, secure, user);
    }
}

static inline void trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_read_blocked(n, offset, secure, user);
    }
}

#define TRACE_TZ_PPC_WRITE_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_WRITE_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_WRITE_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tz_ppc_write_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " write (secure %d user %d) blocked" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n, offset, secure, user);
    }
}

static inline void trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_write_blocked(n, offset, secure, user);
    }
}

#define TRACE_IOTKIT_SECCTL_S_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_secctl_s_read " "IoTKit SecCtl S regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_S_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_secctl_s_write " "IoTKit SecCtl S regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_read " "IoTKit SecCtl NS regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_write " "IoTKit SecCtl NS regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_write(offset, data, size);
    }
}

#define TRACE_CCM_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_ENTRY) || \
    false)

static inline void _nocheck__trace_ccm_entry(void)
{
    if (trace_event_get_state(TRACE_CCM_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ccm_entry " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_ccm_entry(void)
{
    if (true) {
        _nocheck__trace_ccm_entry();
    }
}

#define TRACE_CCM_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_freq(uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ccm_freq " "freq = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , freq);
    }
}

static inline void trace_ccm_freq(uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_freq(freq);
    }
}

#define TRACE_CCM_CLOCK_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_CLOCK_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_CLOCK_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ccm_clock_freq " "(Clock = %d) = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , clock, freq);
    }
}

static inline void trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_clock_freq(clock, freq);
    }
}

#define TRACE_CCM_READ_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_READ_REG) || \
    false)

static inline void _nocheck__trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_READ_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ccm_read_reg " "reg[%s] <= 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , reg_name, value);
    }
}

static inline void trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_read_reg(reg_name, value);
    }
}

#define TRACE_CCM_WRITE_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_WRITE_REG) || \
    false)

static inline void _nocheck__trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_WRITE_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ccm_write_reg " "reg[%s] => 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , reg_name, value);
    }
}

static inline void trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_write_reg(reg_name, value);
    }
}

#define TRACE_IOTKIT_SYSINFO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_sysinfo_read " "IoTKit SysInfo read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSINFO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_sysinfo_write " "IoTKit SysInfo write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_sysctl_read " "IoTKit SysCtl read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_sysctl_write " "IoTKit SysCtl write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_RESET) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_reset(void)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:iotkit_sysctl_reset " "IoTKit SysCtl: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_iotkit_sysctl_reset(void)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_reset();
    }
}

#define TRACE_ARMSSE_CPUID_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_READ) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:armsse_cpuid_read " "SSE-200 CPU_IDENTITY read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPUID_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:armsse_cpuid_write " "SSE-200 CPU_IDENTITY write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_write(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_READ) || \
    false)

static inline void _nocheck__trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:armsse_mhu_read " "SSE-200 MHU read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:armsse_mhu_write " "SSE-200 MHU write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_write(offset, data, size);
    }
}

#define TRACE_ASPEED_XDMA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_XDMA_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_XDMA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_xdma_write " "XDMA write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data);
    }
}

static inline void trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_xdma_write(offset, data);
    }
}

#define TRACE_BCM2835_MBOX_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_mbox_write " "mbox write sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , size, addr, value);
    }
}

static inline void trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_write(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_mbox_read " "mbox read sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , size, addr, value);
    }
}

static inline void trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_read(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_irq(unsigned level)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_mbox_irq " "mbox irq:ARM level:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_bcm2835_mbox_irq(unsigned level)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_irq(level);
    }
}

#define TRACE_BCM2835_MBOX_PROPERTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_PROPERTY) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_PROPERTY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_mbox_property " "mbox property tag:0x%08x in_sz:%u out_sz:%zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , tag, bufsize, resplen);
    }
}

static inline void trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_property(tag, bufsize, resplen);
    }
}
#endif /* TRACE_HW_MISC_GENERATED_TRACERS_H */
