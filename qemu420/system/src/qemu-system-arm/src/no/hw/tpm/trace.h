/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_TPM_GENERATED_TRACERS_H
#define TRACE_HW_TPM_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_TPM_CRB_MMIO_READ_EVENT;
extern TraceEvent _TRACE_TPM_CRB_MMIO_WRITE_EVENT;
extern TraceEvent _TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST_EVENT;
extern TraceEvent _TRACE_TPM_PASSTHROUGH_RESET_EVENT;
extern TraceEvent _TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN_EVENT;
extern TraceEvent _TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN_EVENT;
extern TraceEvent _TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2_EVENT;
extern TraceEvent _TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2_EVENT;
extern TraceEvent _TRACE_TPM_UTIL_GET_BUFFER_SIZE_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_LOCALITY_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_HANDLE_REQUEST_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_PROBE_CAPS_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_BUFFER_SIZE_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_GET_STATE_BLOB_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_STATE_BLOB_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_TPM_EMULATOR_INST_INIT_EVENT;
extern TraceEvent _TRACE_TPM_TIS_SHOW_BUFFER_EVENT;
extern TraceEvent _TRACE_TPM_TIS_RAISE_IRQ_EVENT;
extern TraceEvent _TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY_EVENT;
extern TraceEvent _TRACE_TPM_TIS_ABORT_EVENT;
extern TraceEvent _TRACE_TPM_TIS_DATA_READ_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_READ_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_LOCTY4_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ_EVENT;
extern TraceEvent _TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND_EVENT;
extern TraceEvent _TRACE_TPM_TIS_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_TPM_PPI_MEMSET_EVENT;
extern uint16_t _TRACE_TPM_CRB_MMIO_READ_DSTATE;
extern uint16_t _TRACE_TPM_CRB_MMIO_WRITE_DSTATE;
extern uint16_t _TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST_DSTATE;
extern uint16_t _TRACE_TPM_PASSTHROUGH_RESET_DSTATE;
extern uint16_t _TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN_DSTATE;
extern uint16_t _TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN_DSTATE;
extern uint16_t _TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2_DSTATE;
extern uint16_t _TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2_DSTATE;
extern uint16_t _TRACE_TPM_UTIL_GET_BUFFER_SIZE_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_LOCALITY_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_HANDLE_REQUEST_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_PROBE_CAPS_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_BUFFER_SIZE_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_GET_STATE_BLOB_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_STATE_BLOB_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_TPM_EMULATOR_INST_INIT_DSTATE;
extern uint16_t _TRACE_TPM_TIS_SHOW_BUFFER_DSTATE;
extern uint16_t _TRACE_TPM_TIS_RAISE_IRQ_DSTATE;
extern uint16_t _TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY_DSTATE;
extern uint16_t _TRACE_TPM_TIS_ABORT_DSTATE;
extern uint16_t _TRACE_TPM_TIS_DATA_READ_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_READ_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_LOCTY4_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ_DSTATE;
extern uint16_t _TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND_DSTATE;
extern uint16_t _TRACE_TPM_TIS_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_TPM_PPI_MEMSET_DSTATE;
#define TRACE_TPM_CRB_MMIO_READ_ENABLED 1
#define TRACE_TPM_CRB_MMIO_WRITE_ENABLED 1
#define TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST_ENABLED 1
#define TRACE_TPM_PASSTHROUGH_RESET_ENABLED 1
#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN_ENABLED 1
#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN_ENABLED 1
#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2_ENABLED 1
#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2_ENABLED 1
#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_LOCALITY_ENABLED 1
#define TRACE_TPM_EMULATOR_HANDLE_REQUEST_ENABLED 1
#define TRACE_TPM_EMULATOR_PROBE_CAPS_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_BUFFER_SIZE_ENABLED 1
#define TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME_ENABLED 1
#define TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG_ENABLED 1
#define TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT_ENABLED 1
#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12_ENABLED 1
#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2_ENABLED 1
#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC_ENABLED 1
#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR_ENABLED 1
#define TRACE_TPM_EMULATOR_GET_STATE_BLOB_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_STATE_BLOB_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR_ENABLED 1
#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE_ENABLED 1
#define TRACE_TPM_EMULATOR_PRE_SAVE_ENABLED 1
#define TRACE_TPM_EMULATOR_INST_INIT_ENABLED 1
#define TRACE_TPM_TIS_SHOW_BUFFER_ENABLED 1
#define TRACE_TPM_TIS_RAISE_IRQ_ENABLED 1
#define TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY_ENABLED 1
#define TRACE_TPM_TIS_ABORT_ENABLED 1
#define TRACE_TPM_TIS_DATA_READ_ENABLED 1
#define TRACE_TPM_TIS_MMIO_READ_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY4_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ_ENABLED 1
#define TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND_ENABLED 1
#define TRACE_TPM_TIS_PRE_SAVE_ENABLED 1
#define TRACE_TPM_PPI_MEMSET_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_TPM_CRB_MMIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_CRB_MMIO_READ) || \
    false)

static inline void _nocheck__trace_tpm_crb_mmio_read(uint64_t addr, unsigned size, uint32_t val)
{
    if (trace_event_get_state(TRACE_TPM_CRB_MMIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_crb_mmio_read " "CRB read 0x%016" PRIx64 " len:%u val: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, val);
    }
}

static inline void trace_tpm_crb_mmio_read(uint64_t addr, unsigned size, uint32_t val)
{
    if (true) {
        _nocheck__trace_tpm_crb_mmio_read(addr, size, val);
    }
}

#define TRACE_TPM_CRB_MMIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_CRB_MMIO_WRITE) || \
    false)

static inline void _nocheck__trace_tpm_crb_mmio_write(uint64_t addr, unsigned size, uint32_t val)
{
    if (trace_event_get_state(TRACE_TPM_CRB_MMIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_crb_mmio_write " "CRB write 0x%016" PRIx64 " len:%u val: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, val);
    }
}

static inline void trace_tpm_crb_mmio_write(uint64_t addr, unsigned size, uint32_t val)
{
    if (true) {
        _nocheck__trace_tpm_crb_mmio_write(addr, size, val);
    }
}

#define TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST) || \
    false)

static inline void _nocheck__trace_tpm_passthrough_handle_request(void * cmd)
{
    if (trace_event_get_state(TRACE_TPM_PASSTHROUGH_HANDLE_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_passthrough_handle_request " "processing command %p" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cmd);
    }
}

static inline void trace_tpm_passthrough_handle_request(void * cmd)
{
    if (true) {
        _nocheck__trace_tpm_passthrough_handle_request(cmd);
    }
}

#define TRACE_TPM_PASSTHROUGH_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_PASSTHROUGH_RESET) || \
    false)

static inline void _nocheck__trace_tpm_passthrough_reset(void)
{
    if (trace_event_get_state(TRACE_TPM_PASSTHROUGH_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_passthrough_reset " "reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_passthrough_reset(void)
{
    if (true) {
        _nocheck__trace_tpm_passthrough_reset();
    }
}

#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN) || \
    false)

static inline void _nocheck__trace_tpm_util_get_buffer_size_hdr_len(uint32_t len, size_t expected)
{
    if (trace_event_get_state(TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_util_get_buffer_size_hdr_len " "tpm_resp->hdr.len = %u, expected = %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len, expected);
    }
}

static inline void trace_tpm_util_get_buffer_size_hdr_len(uint32_t len, size_t expected)
{
    if (true) {
        _nocheck__trace_tpm_util_get_buffer_size_hdr_len(len, expected);
    }
}

#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN) || \
    false)

static inline void _nocheck__trace_tpm_util_get_buffer_size_len(uint32_t len, size_t expected)
{
    if (trace_event_get_state(TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_util_get_buffer_size_len " "tpm_resp->len = %u, expected = %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len, expected);
    }
}

static inline void trace_tpm_util_get_buffer_size_len(uint32_t len, size_t expected)
{
    if (true) {
        _nocheck__trace_tpm_util_get_buffer_size_len(len, expected);
    }
}

#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2) || \
    false)

static inline void _nocheck__trace_tpm_util_get_buffer_size_hdr_len2(uint32_t len, size_t expected)
{
    if (trace_event_get_state(TRACE_TPM_UTIL_GET_BUFFER_SIZE_HDR_LEN2) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_util_get_buffer_size_hdr_len2 " "tpm2_resp->hdr.len = %u, expected = %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len, expected);
    }
}

static inline void trace_tpm_util_get_buffer_size_hdr_len2(uint32_t len, size_t expected)
{
    if (true) {
        _nocheck__trace_tpm_util_get_buffer_size_hdr_len2(len, expected);
    }
}

#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2) || \
    false)

static inline void _nocheck__trace_tpm_util_get_buffer_size_len2(uint32_t len, size_t expected)
{
    if (trace_event_get_state(TRACE_TPM_UTIL_GET_BUFFER_SIZE_LEN2) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_util_get_buffer_size_len2 " "tpm2_resp->len = %u, expected = %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len, expected);
    }
}

static inline void trace_tpm_util_get_buffer_size_len2(uint32_t len, size_t expected)
{
    if (true) {
        _nocheck__trace_tpm_util_get_buffer_size_len2(len, expected);
    }
}

#define TRACE_TPM_UTIL_GET_BUFFER_SIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_UTIL_GET_BUFFER_SIZE) || \
    false)

static inline void _nocheck__trace_tpm_util_get_buffer_size(size_t len)
{
    if (trace_event_get_state(TRACE_TPM_UTIL_GET_BUFFER_SIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_util_get_buffer_size " "buffersize of device: %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len);
    }
}

static inline void trace_tpm_util_get_buffer_size(size_t len)
{
    if (true) {
        _nocheck__trace_tpm_util_get_buffer_size(len);
    }
}

#define TRACE_TPM_EMULATOR_SET_LOCALITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_LOCALITY) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_locality(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_LOCALITY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_locality " "setting locality to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_emulator_set_locality(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_locality(locty);
    }
}

#define TRACE_TPM_EMULATOR_HANDLE_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_HANDLE_REQUEST) || \
    false)

static inline void _nocheck__trace_tpm_emulator_handle_request(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_HANDLE_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_handle_request " "processing TPM command" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_handle_request(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_handle_request();
    }
}

#define TRACE_TPM_EMULATOR_PROBE_CAPS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_PROBE_CAPS) || \
    false)

static inline void _nocheck__trace_tpm_emulator_probe_caps(uint64_t caps)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_PROBE_CAPS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_probe_caps " "capabilities: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , caps);
    }
}

static inline void trace_tpm_emulator_probe_caps(uint64_t caps)
{
    if (true) {
        _nocheck__trace_tpm_emulator_probe_caps(caps);
    }
}

#define TRACE_TPM_EMULATOR_SET_BUFFER_SIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_BUFFER_SIZE) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_buffer_size(uint32_t buffersize, uint32_t minsize, uint32_t maxsize)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_BUFFER_SIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_buffer_size " "buffer size: %u, min: %u, max: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , buffersize, minsize, maxsize);
    }
}

static inline void trace_tpm_emulator_set_buffer_size(uint32_t buffersize, uint32_t minsize, uint32_t maxsize)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_buffer_size(buffersize, minsize, maxsize);
    }
}

#define TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME) || \
    false)

static inline void _nocheck__trace_tpm_emulator_startup_tpm_resume(bool is_resume, size_t buffersize)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_STARTUP_TPM_RESUME) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_startup_tpm_resume " "is_resume: %d, buffer size: %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , is_resume, buffersize);
    }
}

static inline void trace_tpm_emulator_startup_tpm_resume(bool is_resume, size_t buffersize)
{
    if (true) {
        _nocheck__trace_tpm_emulator_startup_tpm_resume(is_resume, buffersize);
    }
}

#define TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG) || \
    false)

static inline void _nocheck__trace_tpm_emulator_get_tpm_established_flag(uint8_t flag)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_GET_TPM_ESTABLISHED_FLAG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_get_tpm_established_flag " "got established flag: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , flag);
    }
}

static inline void trace_tpm_emulator_get_tpm_established_flag(uint8_t flag)
{
    if (true) {
        _nocheck__trace_tpm_emulator_get_tpm_established_flag(flag);
    }
}

#define TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT) || \
    false)

static inline void _nocheck__trace_tpm_emulator_cancel_cmd_not_supt(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_CANCEL_CMD_NOT_SUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_cancel_cmd_not_supt " "Backend does not support CANCEL_TPM_CMD" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_cancel_cmd_not_supt(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_cancel_cmd_not_supt();
    }
}

#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12) || \
    false)

static inline void _nocheck__trace_tpm_emulator_handle_device_opts_tpm12(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM12) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_handle_device_opts_tpm12 " "TPM Version 1.2" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_handle_device_opts_tpm12(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_handle_device_opts_tpm12();
    }
}

#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2) || \
    false)

static inline void _nocheck__trace_tpm_emulator_handle_device_opts_tpm2(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_TPM2) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_handle_device_opts_tpm2 " "TPM Version 2" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_handle_device_opts_tpm2(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_handle_device_opts_tpm2();
    }
}

#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC) || \
    false)

static inline void _nocheck__trace_tpm_emulator_handle_device_opts_unspec(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_UNSPEC) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_handle_device_opts_unspec " "TPM Version Unspecified" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_handle_device_opts_unspec(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_handle_device_opts_unspec();
    }
}

#define TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR) || \
    false)

static inline void _nocheck__trace_tpm_emulator_handle_device_opts_startup_error(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_HANDLE_DEVICE_OPTS_STARTUP_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_handle_device_opts_startup_error " "Startup error" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_handle_device_opts_startup_error(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_handle_device_opts_startup_error();
    }
}

#define TRACE_TPM_EMULATOR_GET_STATE_BLOB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_GET_STATE_BLOB) || \
    false)

static inline void _nocheck__trace_tpm_emulator_get_state_blob(uint8_t type, uint32_t size, uint32_t flags)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_GET_STATE_BLOB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_get_state_blob " "got state blob type %d, %u bytes, flags 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, size, flags);
    }
}

static inline void trace_tpm_emulator_get_state_blob(uint8_t type, uint32_t size, uint32_t flags)
{
    if (true) {
        _nocheck__trace_tpm_emulator_get_state_blob(type, size, flags);
    }
}

#define TRACE_TPM_EMULATOR_SET_STATE_BLOB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_STATE_BLOB) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_state_blob(uint8_t type, uint32_t size, uint32_t flags)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_STATE_BLOB) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_state_blob " "set state blob type %d, %u bytes, flags 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, size, flags);
    }
}

static inline void trace_tpm_emulator_set_state_blob(uint8_t type, uint32_t size, uint32_t flags)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_state_blob(type, size, flags);
    }
}

#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_STATE_BLOBS) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_state_blobs(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_STATE_BLOBS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_state_blobs " "setting state blobs" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_set_state_blobs(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_state_blobs();
    }
}

#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_state_blobs_error(const char * msg)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_STATE_BLOBS_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_state_blobs_error " "error while setting state blobs: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , msg);
    }
}

static inline void trace_tpm_emulator_set_state_blobs_error(const char * msg)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_state_blobs_error(msg);
    }
}

#define TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE) || \
    false)

static inline void _nocheck__trace_tpm_emulator_set_state_blobs_done(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_SET_STATE_BLOBS_DONE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_set_state_blobs_done " "Done setting state blobs" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_set_state_blobs_done(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_set_state_blobs_done();
    }
}

#define TRACE_TPM_EMULATOR_PRE_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_PRE_SAVE) || \
    false)

static inline void _nocheck__trace_tpm_emulator_pre_save(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_PRE_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_pre_save " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_pre_save(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_pre_save();
    }
}

#define TRACE_TPM_EMULATOR_INST_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_EMULATOR_INST_INIT) || \
    false)

static inline void _nocheck__trace_tpm_emulator_inst_init(void)
{
    if (trace_event_get_state(TRACE_TPM_EMULATOR_INST_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_emulator_inst_init " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_emulator_inst_init(void)
{
    if (true) {
        _nocheck__trace_tpm_emulator_inst_init();
    }
}

#define TRACE_TPM_TIS_SHOW_BUFFER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_SHOW_BUFFER) || \
    false)

static inline void _nocheck__trace_tpm_tis_show_buffer(const char * direction, size_t len, const char * buf)
{
    if (trace_event_get_state(TRACE_TPM_TIS_SHOW_BUFFER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_show_buffer " "direction: %s len: %zu\nbuf: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , direction, len, buf);
    }
}

static inline void trace_tpm_tis_show_buffer(const char * direction, size_t len, const char * buf)
{
    if (true) {
        _nocheck__trace_tpm_tis_show_buffer(direction, len, buf);
    }
}

#define TRACE_TPM_TIS_RAISE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_RAISE_IRQ) || \
    false)

static inline void _nocheck__trace_tpm_tis_raise_irq(uint32_t irqmask)
{
    if (trace_event_get_state(TRACE_TPM_TIS_RAISE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_raise_irq " "Raising IRQ for flag 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irqmask);
    }
}

static inline void trace_tpm_tis_raise_irq(uint32_t irqmask)
{
    if (true) {
        _nocheck__trace_tpm_tis_raise_irq(irqmask);
    }
}

#define TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY) || \
    false)

static inline void _nocheck__trace_tpm_tis_new_active_locality(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_TIS_NEW_ACTIVE_LOCALITY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_new_active_locality " "Active locality is now %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_tis_new_active_locality(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_tis_new_active_locality(locty);
    }
}

#define TRACE_TPM_TIS_ABORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_ABORT) || \
    false)

static inline void _nocheck__trace_tpm_tis_abort(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_TIS_ABORT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_abort " "New active locality is %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_tis_abort(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_tis_abort(locty);
    }
}

#define TRACE_TPM_TIS_DATA_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_DATA_READ) || \
    false)

static inline void _nocheck__trace_tpm_tis_data_read(uint32_t value, uint32_t off)
{
    if (trace_event_get_state(TRACE_TPM_TIS_DATA_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_data_read " "byte 0x%02x   [%d]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value, off);
    }
}

static inline void trace_tpm_tis_data_read(uint32_t value, uint32_t off)
{
    if (true) {
        _nocheck__trace_tpm_tis_data_read(value, off);
    }
}

#define TRACE_TPM_TIS_MMIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_READ) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_read(unsigned size, uint32_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_read " " read.%u(0x%08x) = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , size, addr, val);
    }
}

static inline void trace_tpm_tis_mmio_read(unsigned size, uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_read(size, addr, val);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write(unsigned size, uint32_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write " "write.%u(0x%08x) = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , size, addr, val);
    }
}

static inline void trace_tpm_tis_mmio_write(unsigned size, uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write(size, addr, val);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY4_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_LOCTY4) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_locty4(void)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_LOCTY4) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_locty4 " "Access to locality 4 only allowed from hardware" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_tis_mmio_write_locty4(void)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_locty4();
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_release_locty(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_RELEASE_LOCTY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_release_locty " "Releasing locality %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_tis_mmio_write_release_locty(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_release_locty(locty);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_locty_req_use(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_LOCTY_REQ_USE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_locty_req_use " "Locality %d requests use" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_tis_mmio_write_locty_req_use(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_locty_req_use(locty);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_next_locty(uint8_t locty)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_NEXT_LOCTY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_next_locty " "Next active locality is %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty);
    }
}

static inline void trace_tpm_tis_mmio_write_next_locty(uint8_t locty)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_next_locty(locty);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_locty_seized(uint8_t locty, uint8_t active)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_LOCTY_SEIZED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_locty_seized " "Locality %d seized from locality %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty, active);
    }
}

static inline void trace_tpm_tis_mmio_write_locty_seized(uint8_t locty, uint8_t active)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_locty_seized(locty, active);
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_init_abort(void)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_INIT_ABORT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_init_abort " "Initiating abort" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_tis_mmio_write_init_abort(void)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_init_abort();
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_lowering_irq(void)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_LOWERING_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_lowering_irq " "Lowering IRQ" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_tpm_tis_mmio_write_lowering_irq(void)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_lowering_irq();
    }
}

#define TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND) || \
    false)

static inline void _nocheck__trace_tpm_tis_mmio_write_data2send(uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_TPM_TIS_MMIO_WRITE_DATA2SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_mmio_write_data2send " "Data to send to TPM: 0x%08x (size=%d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value, size);
    }
}

static inline void trace_tpm_tis_mmio_write_data2send(uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_tpm_tis_mmio_write_data2send(value, size);
    }
}

#define TRACE_TPM_TIS_PRE_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_TIS_PRE_SAVE) || \
    false)

static inline void _nocheck__trace_tpm_tis_pre_save(uint8_t locty, uint32_t rw_offset)
{
    if (trace_event_get_state(TRACE_TPM_TIS_PRE_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_tis_pre_save " "locty: %d, rw_offset = %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , locty, rw_offset);
    }
}

static inline void trace_tpm_tis_pre_save(uint8_t locty, uint32_t rw_offset)
{
    if (true) {
        _nocheck__trace_tpm_tis_pre_save(locty, rw_offset);
    }
}

#define TRACE_TPM_PPI_MEMSET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TPM_PPI_MEMSET) || \
    false)

static inline void _nocheck__trace_tpm_ppi_memset(uint8_t * ptr, size_t size)
{
    if (trace_event_get_state(TRACE_TPM_PPI_MEMSET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:tpm_ppi_memset " "memset: %p %zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ptr, size);
    }
}

static inline void trace_tpm_ppi_memset(uint8_t * ptr, size_t size)
{
    if (true) {
        _nocheck__trace_tpm_ppi_memset(ptr, size);
    }
}
#endif /* TRACE_HW_TPM_GENERATED_TRACERS_H */
